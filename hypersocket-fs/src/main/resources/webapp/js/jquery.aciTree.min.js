/*
 * aciTree jQuery Plugin v3.5.0
 * http://acoderinsights.ro
 *
 * Copyright (c) 2013 Dragos Ursu
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Require jQuery Library >= v1.7.1 http://jquery.com
 * + aciPlugin >= v1.4.0 https://github.com/dragosu/jquery-aciPlugin
 */

// core
(function(c, b, e) {
	var a = {
		jsonUrl : null,
		rootData : null,
		threads : 4,
		queueDelay : 40,
		loaderDelay : 500,
		expand : false,
		collapse : false,
		unique : false,
		empty : false,
		show : {
			props : {
				height : "show"
			},
			duration : "medium",
			easing : "linear"
		},
		animateRoot : true,
		hide : {
			props : {
				height : "hide"
			},
			duration : "medium",
			easing : "linear"
		},
		view : {
			duration : "medium",
			easing : "linear"
		},
		callbacks : {
			item : null
		},
		itemHook : function(g, h, f, i) {
		}
	};
	var d = {
		__extend : function() {
			c.extend(this._instance, {
				locked : false
			});
			c.extend(this._private,
					{
						loadQueue : new this._queue(
								this._instance.options.threads, false,
								this._instance.options.queueDelay)
								.context(this),
						loaderHide : null,
						loaderInterval : null,
						delayBusy : 0
					})
		},
		init : function(g) {
			g = this._options(g);
			if (this.wasInit()) {
				this._trigger(null, "wasinit", g);
				this._fail(null, g);
				return
			}
			if (this.isLocked()) {
				this._trigger(null, "locked", g);
				this._fail(null, g);
				return
			}
			if (!this._trigger(null, "beforeinit", g)) {
				this._trigger(null, "initfail", g);
				this._fail(null, g);
				return
			}
			this._instance.locked = true;
			this._instance.jQuery
					.addClass("aciTree" + this._instance.index)
					.bind(
							"mousedown" + this._instance.nameSpace,
							function(j) {
								var i = c(j.target);
								if (i
										.is(".aciTreeButton,.aciTreeLoad,.aciTreeEntry,.aciTreeIcon")) {
									c(this).focus();
									j.preventDefault()
								}
							})
					.on(
							"click" + this._instance.nameSpace,
							".aciTreeButton",
							this
									.proxy(function(j) {
										var i = this.itemFrom(j.target);
										if (!this.isBusy(i)) {
											this
													.toggle(
															i,
															{
																collapse : this._instance.options.collapse,
																expand : this._instance.options.expand,
																unique : this._instance.options.unique
															})
										}
									})).on(
							"mouseenter" + this._instance.nameSpace
									+ " mouseleave" + this._instance.nameSpace,
							".aciTreeButton",
							function(j) {
								var i = c(j.target);
								if (!i.hasClass("aciTreeButton")) {
									i = i.parents(".aciTreeButton:first")
								}
								i.toggleClass("aciTreeHover",
										j.type == "mouseenter")
							}).on(
							"mouseenter" + this._instance.nameSpace
									+ " mouseleave" + this._instance.nameSpace,
							".aciTreeLine",
							function(j) {
								var i = c(j.target);
								if (!i.hasClass("aciTreeLine")) {
									i = i.parents(".aciTreeLine:first")
								}
								i.toggleClass("aciTreeHover",
										j.type == "mouseenter")
							});
			this._initHook();
			var h = this.proxy(function() {
				this._super();
				this._instance.locked = false;
				this._trigger(null, "init", g);
				this._success(null, g)
			});
			var f = this.proxy(function() {
				this._super();
				this._instance.locked = false;
				this._trigger(null, "initfail", g);
				this._fail(null, g)
			});
			if (this._instance.options.rootData) {
				this.loadFrom(null, this._inner(g, {
					success : h,
					fail : f,
					itemData : this._instance.options.rootData
				}))
			} else {
				if (this._instance.options.jsonUrl) {
					this.ajaxLoad(null, this._inner(g, {
						success : h,
						fail : f
					}))
				} else {
					h.apply(this)
				}
			}
		},
		_initHook : function() {
		},
		isLocked : function() {
			return this._instance.locked
		},
		_queue : function(l, n, g) {
			var m = [];
			var i = [];
			var f = l ? Math.max(l, 1) : 1;
			var k = 0;
			var h = false;
			var j = null;
			this.push = function(p, o) {
				if (!h) {
					m.push({
						callback : p,
						async : o
					})
				}
				return this
			};
			this.complete = function(p, o) {
				if (!h) {
					i.push({
						callback : p,
						async : o
					})
				}
				return this
			};
			this.destroy = function() {
				h = true;
				b.setTimeout(function() {
					i = [];
					m = [];
					k = 0;
					h = false
				}, g)
			};
			this.busy = function() {
				return k >= f
			};
			this.empty = function() {
				return (k == 0) && (m.length == 0) && (i.length == 0)
			};
			this.context = function(o) {
				j = o;
				return this
			};
			this.run = function(r) {
				if ((k >= f) || h) {
					return
				}
				if (r) {
					for ( var q = 1, p = f - k; q < p; q++) {
						this.run()
					}
				}
				var o = this;
				b.setTimeout(function() {
					if ((k >= f) || h) {
						return
					}
					var s = m.shift();
					if (!s) {
						if (m.length) {
							b.setTimeout(function() {
								o.run()
							}, 10)
						} else {
							s = i.shift()
						}
					}
					if (s) {
						if (s.async) {
							k++;
							if (j) {
								s.callback.call(j, function() {
									k--;
									o.run()
								})
							} else {
								s.callback(function() {
									k--;
									o.run()
								})
							}
						} else {
							k++;
							if (j) {
								s.callback.apply(j)
							} else {
								s.callback()
							}
							k--;
							o.run()
						}
					}
				}, n ? 5 : g)
			}
		},
		_options : function(h, j, f, i) {
			var g = c.extend({
				uid : "ui",
				success : null,
				fail : null,
				notify : null,
				expand : this._instance.options.expand,
				collapse : this._instance.options.collapse,
				unique : this._instance.options.unique,
				unanimated : this._instance.options.unanimated,
				itemData : {}
			}, h);
			if (j) {
				if (h && h.success) {
					g.success = function() {
						j.apply(this, arguments);
						h.success.apply(this, arguments)
					}
				} else {
					g.success = j
				}
			}
			if (f) {
				if (h && h.fail) {
					g.fail = function() {
						f.apply(this, arguments);
						h.fail.apply(this, arguments)
					}
				} else {
					g.fail = f
				}
			}
			if (i) {
				if (h && h.notify) {
					g.notify = function() {
						i.apply(this, arguments);
						h.notify.apply(this, arguments)
					}
				} else {
					if (!g.notify && h && h.success) {
						g.notify = function() {
							i.apply(this, arguments);
							h.success.apply(this, arguments)
						}
					} else {
						g.notify = i
					}
				}
			} else {
				if (!g.notify && h && h.success) {
					g.notify = h.success
				}
			}
			return g
		},
		_inner : function(f, g) {
			return c.extend({}, f, {
				success : null,
				fail : null,
				notify : null
			}, g)
		},
		_trigger : function(i, f, g) {
			var h = c.Event("acitree");
			if (!g) {
				g = this._options()
			}
			this._instance.jQuery.trigger(h,
					[ this, i ? i.first() : null, f, g ]);
			return !h.isDefaultPrevented()
		},
		_success : function(g, f) {
			if (f && f.success) {
				f.success.call(this, g ? g.first() : null, f)
			}
		},
		_fail : function(g, f) {
			if (f && f.fail) {
				f.fail.call(this, g ? g.first() : null, f)
			}
		},
		_notify : function(g, f) {
			if (f && f.notify) {
				f.notify.call(this, g ? g.first() : null, f)
			}
		},
		_delayBusy : function(f, g) {
			if ((this._private.delayBusy < 10) && this.isBusy(f)) {
				this._private.delayBusy++;
				b.setTimeout(this.proxy(function() {
					this._delayBusy.call(this, f, g);
					this._private.delayBusy--
				}), 10);
				return
			}
			g.apply(this)
		},
		ajaxLoad : function(g, f) {
			if (g && this.isBusy(g)) {
				this._delayBusy(g, function() {
					this.ajaxLoad(g, f)
				});
				return
			}
			f = this._options(f, function() {
				this._loading(g);
				this._trigger(g, "loaded", f)
			}, function() {
				this._loading(g);
				this._trigger(g, "loadfail", f)
			}, function() {
				this._loading(g);
				this._trigger(g, "wasloaded", f)
			});
			if (!g || this.isFolder(g)) {
				this._private.loadQueue
						.push(
								function(h) {
									if (!this._trigger(g, "beforeload", f)) {
										this._fail(g, f);
										h();
										return
									}
									this._loading(g, true);
									if (this.wasLoad(g)) {
										this._notify(g, f);
										h();
										return
									}
									c
											.get(
													this._instance.options.jsonUrl
															+ (g ? this
																	.getId(g)
																	: ""),
													this
															.proxy(function(i) {
																
																if(i && i.folders instanceof Array) {
																	i = i.folders;
																}
																if (i
																		&& (i instanceof Array)
																		&& i.length) {
																	var j = function() {
																		if (this
																				.wasLoad(g)) {
																			this
																					._notify(
																							g,
																							f);
																			h()
																		} else {
																			this
																					._createBranch(
																							g,
																							this
																									._inner(
																											f,
																											{
																												success : function() {
																													this
																															._success(
																																	g,
																																	f);
																													h()
																												},
																												fail : function() {
																													this
																															._fail(
																																	g,
																																	f);
																													h()
																												},
																												itemData : i
																											}))
																		}
																	};
																	if (!g
																			|| this
																					.isFolder(g)) {
																		j
																				.apply(this)
																	} else {
																		this
																				.setFolder(
																						g,
																						this
																								._inner(
																										f,
																										{
																											success : j,
																											fail : f.fail
																										}))
																	}
																} else {
																	var j = function() {
																		this
																				._fail(
																						g,
																						f);
																		h()
																	};
																	if (!g
																			|| this
																					.isFile(g)) {
																		j
																				.apply(this)
																	} else {
																		this
																				.setFile(
																						g,
																						this
																								._inner(
																										f,
																										{
																											success : j,
																											fail : j
																										}))
																	}
																}
															}), "json").fail(
													this.proxy(function() {
														this._fail(g, f);
														h()
													}))
								}, true).run()
			} else {
				this._fail(g, f)
			}
		},
		loadFrom : function(g, f) {
			if (g && this.isBusy(g)) {
				this._delayBusy(g, function() {
					this.loadFrom(g, f)
				});
				return
			}
			f = this._options(f, function() {
				this._loading(g);
				this._trigger(g, "loaded", f)
			}, function() {
				this._loading(g);
				this._trigger(g, "loadfail", f)
			}, function() {
				this._loading(g);
				this._trigger(g, "wasloaded", f)
			});
			if (!g || this.isFolder(g)) {
				if (!this._trigger(g, "beforeload", f)) {
					this._fail(g, f);
					return
				}
				this._loading(g, true);
				if (this.wasLoad(g)) {
					this._notify(g, f);
					return
				}
				if (f.itemData && (f.itemData instanceof Array)
						&& f.itemData.length) {
					var h = function() {
						if (this.wasLoad(g)) {
							this._notify(g, f)
						} else {
							this._createBranch(g, f)
						}
					};
					if (!g || this.isFolder(g)) {
						h.apply(this)
					} else {
						this.setFolder(g, this._inner(f, {
							success : h,
							fail : f.fail
						}))
					}
				} else {
					if (!g || this.isFile(g)) {
						this._fail(g, f)
					} else {
						this.setFile(g, this._inner(f, {
							success : f.fail,
							fail : f.fail
						}))
					}
				}
			} else {
				this._fail(g, f)
			}
		},
		unload : function(h, f) {
			f = this._options(f, function() {
				this._loading(h);
				this._trigger(h, "unloaded", f)
			}, function() {
				this._loading(h);
				this._trigger(h, "unloadfail", f)
			}, function() {
				this._loading(h);
				this._trigger(h, "notloaded", f)
			});
			if (!h || this.isFolder(h)) {
				if (!this._trigger(h, "beforeunload", f)) {
					this._fail(h, f);
					return
				}
				this._loading(h, true);
				if (!this.wasLoad(h)) {
					this._notify(h, f);
					return
				}
				var g = false;
				var i = this.childrens(h, true);
				i.each(this.proxy(function(j) {
					var k = c(j);
					if (this.isFolder(k)) {
						if (this.isOpen(k)) {
							if (!this._trigger(k, "beforeclose", f)) {
								g = true;
								return false
							}
						}
						if (this.wasLoad(k)) {
							if (!this._trigger(k, "beforeunload", f)) {
								g = true;
								return false
							}
						}
					}
					if (!this._trigger(k, "beforeremove", f)) {
						g = true;
						return false
					}
				}, true));
				if (g) {
					this._fail(h, f);
					return
				}
				i.each(this.proxy(function(j) {
					var k = c(j);
					if (this.isFolder(k)) {
						if (this.isOpen(k)) {
							this._trigger(k, "closed", f)
						}
						if (this.wasLoad(k)) {
							this._trigger(k, "unloaded", f)
						}
					}
					this._trigger(k, "removed", f)
				}, true));
				if (h) {
					if (this.isOpen(h)) {
						this.close(h, this._inner(f, {
							success : function() {
								this._removeContainer(h);
								this._success(h, f)
							},
							fail : f.fail
						}))
					} else {
						this._removeContainer(h);
						this._success(h, f)
					}
				} else {
					this._animate(h, false, !this._instance.options.animateRoot
							|| f.unanimated, function() {
						this._removeContainer();
						this._success(h, f)
					})
				}
			} else {
				this._fail(h, f)
			}
		},
		remove : function(h, f) {
			f = this._options(f, function() {
				this._trigger(h, "removed", f)
			}, function() {
				this._trigger(h, "removefail", f)
			});
			if (this.isItem(h)) {
				if (!this._trigger(h, "beforeremove", f)) {
					this._fail(h, f);
					return
				}
				if (this.isFolder(h) && this.wasLoad(h)) {
					this.unload(h, this._inner(f, {
						success : function() {
							this._success(h, f);
							this._removeItem(h)
						},
						fail : f.fail
					}))
				} else {
					if (this.hasSiblings(h)) {
						this._success(h, f);
						this._removeItem(h)
					} else {
						var g = this.parent(h);
						this.unload(g.length ? g : null, this._inner(f, {
							success : f.success,
							fail : f.fail
						}))
					}
				}
			} else {
				this._fail(h, f)
			}
		},
		_openChilds : function(h, g) {
			if (g.expand) {
				var f = new this._queue(this._instance.options.threads, true)
						.context(this);
				this.folders(this.childrens(h)).each(function() {
					var i = c(this);
					f.push(function(j) {
						this.open(i, this._inner(g, {
							success : j,
							fail : j
						}))
					}, true)
				});
				f.complete(function() {
					this._success(h, g)
				}).run(true)
			} else {
				this._success(h, g)
			}
		},
		_openItem : function(g, f) {
			if (!f.unanimated && !this.isVisible(g)) {
				f.unanimated = true
			}
			if (f.unique) {
				this.closeOthers(g);
				f.unique = false
			}
			g.first().addClass("aciTreeOpen");
			this._updateOddEvenChilds(g);
			this._animate(g, true, f.unanimated, function() {
				this._openChilds(g, f)
			})
		},
		open : function(g, f) {
			f = this._options(f, function() {
				if (this.isOpenPath(g)) {
					this._updateVisible(g, true);
					this._updateOddEven(g)
				}
				this._trigger(g, "opened", f)
			}, function() {
				this._trigger(g, "openfail", f)
			}, function() {
				this._trigger(g, "wasopened", f)
			});
			if (this.isFolder(g)) {
				if (!this._trigger(g, "beforeopen", f)) {
					this._fail(g, f);
					return
				}
				if (this.isOpen(g)) {
					f.success = f.notify;
					this._openChilds(g, f)
				} else {
					if (this.wasLoad(g)) {
						this._openItem(g, f)
					} else {
						this.ajaxLoad(g, this._inner(f, {
							success : function() {
								this._openItem(g, f)
							},
							fail : f.fail
						}))
					}
				}
			} else {
				this._fail(g, f)
			}
		},
		_closeChilds : function(h, g) {
			if (this._instance.options.empty) {
				g.unanimated = true;
				this.unload(h, g)
			} else {
				if (g.collapse) {
					var f = new this._queue(this._instance.options.threads,
							true).context(this);
					this.folders(this.childrens(h)).each(function() {
						var i = c(this);
						f.push(function(j) {
							this.close(i, this._inner(g, {
								success : j,
								fail : j,
								unanimated : true
							}))
						}, true)
					});
					f.complete(function() {
						this._success(h, g)
					}).run(true)
				} else {
					this._success(h, g)
				}
			}
		},
		_closeItem : function(g, f) {
			if (!f.unanimated && !this.isVisible(g)) {
				f.unanimated = true
			}
			g.first().removeClass("aciTreeOpen");
			this._animate(g, false, f.unanimated, function() {
				this._closeChilds(g, f)
			})
		},
		close : function(g, f) {
			f = this._options(f, function() {
				if (this.isOpenPath(g)) {
					this._updateVisible(g, false);
					this._updateOddEven(g)
				}
				this._trigger(g, "closed", f)
			}, function() {
				this._trigger(g, "closefail", f)
			}, function() {
				this._trigger(g, "wasclosed", f)
			});
			if (this.isFolder(g)) {
				if (!this._trigger(g, "beforeclose", f)) {
					this._fail(g, f);
					return
				}
				if (this.isOpen(g)) {
					this._closeItem(g, f)
				} else {
					if (this.wasLoad(g)) {
						f.success = f.notify;
						this._closeChilds(g, f)
					} else {
						this._notify(g, f)
					}
				}
			} else {
				this._fail(g, f)
			}
		},
		_updateVisible : function(f, h) {
			var g = this.childrens(f);
			if (h) {
				this.folders(g, true).each(this.proxy(function(i) {
					var j = c(i);
					if (!j.hasClass("aciTreeVisible")) {
						this._updateVisible(j, true)
					}
				}, true));
				g.addClass("aciTreeVisible")
			} else {
				this.folders(g, true).each(this.proxy(function(i) {
					var j = c(i);
					if (j.hasClass("aciTreeVisible")) {
						this._updateVisible(j, false)
					}
				}, true));
				g.removeClass("aciTreeVisible")
			}
		},
		closeOthers : function(i, h) {
			h = this._options(h);
			if (this.isItem(i)) {
				var f = new this._queue(this._instance.options.threads, true)
						.context(this);
				var g = i.first().add(this.path(i))
						.add(this.childrens(i, true));
				this.folders(this.childrens(null, true), true).not(g).each(
						function() {
							var j = c(this);
							f.push(function(k) {
								this.close(j, this._inner(h, {
									success : k,
									fail : k
								}))
							}, true)
						});
				f.complete(function() {
					this._success(i, h)
				}).run(true)
			} else {
				this._fail(i, h)
			}
		},
		toggle : function(g, f) {
			f = this._options(f, function() {
				this._trigger(g, "toggled", f)
			}, function() {
				this._trigger(g, "togglefail", f)
			});
			if (this.isFolder(g)) {
				if (!this._trigger(g, "beforetoggle", f)) {
					this._fail(g, f);
					return
				}
				if (this.isOpen(g)) {
					this.close(g, f)
				} else {
					this.open(g, f)
				}
			} else {
				this._fail(g, f)
			}
		},
		path : function(g, f) {
			if (g) {
				var h = g.first().parentsUntil(this._instance.jQuery,
						".aciTreeLi");
				return f ? h : c(h.get().reverse())
			}
			return c([])
		},
		isVisible : function(j, g) {
			if (this.isOpenPath(j)) {
				var i = this._instance.jQuery.get(0).getBoundingClientRect();
				var h = j.first().children(".aciTreeLine").find(".aciTreeItem");
				var l = h.get(0).getBoundingClientRect();
				var f = h.outerHeight(true);
				var k = g ? this._instance.jQuery.innerHeight() / 2 : 0;
				if ((l.bottom - f < i.top + k) || (l.top + f > i.bottom - k)) {
					return false
				}
				return true
			}
			return false
		},
		openPath : function(h, g) {
			g = this._options(g);
			if (this.isItem(h)) {
				var f = new this._queue(null, true).context(this);
				this.folders(this.path(h), false).each(function() {
					var i = c(this);
					f.push(function(j) {
						this.open(i, this._inner(g, {
							success : j,
							fail : j
						}))
					}, true)
				});
				f.complete(function() {
					this._success(h, g)
				}).run()
			} else {
				this._fail(h, g)
			}
		},
		isOpenPath : function(f) {
			return f && f.hasClass("aciTreeVisible")
		},
		_speedFraction : function(h, f, i) {
			if ((i < f) && f) {
				var g = parseInt(h);
				if (isNaN(g)) {
					switch (h) {
					case "slow":
						g = 600;
						break;
					case "medium":
						g = 400;
						break;
					case "fast":
						g = 200;
						break;
					default:
						return h
					}
				}
				return g * i / f
			}
			return h
		},
		setVisible : function(g, f) {
			f = this._options(f, function() {
				this._trigger(g, "visible", f)
			}, function() {
				this._trigger(g, "visiblefail", f)
			}, function() {
				this._trigger(g, "wasvisible", f)
			});
			if (this.isItem(g)) {
				if (!this._trigger(g, "beforevisible", f)) {
					this._fail(g, f);
					return
				}
				if (this.isVisible(g)) {
					this._notify(g, f);
					return
				}
				var h = function() {
					var k = this._instance.jQuery.get(0)
							.getBoundingClientRect();
					var j = g.first().children(".aciTreeLine").find(
							".aciTreeItem");
					var n = j.get(0).getBoundingClientRect();
					var i = j.outerHeight(true);
					var m = f.center ? this._instance.jQuery.innerHeight() / 2
							: 0;
					if (n.bottom - i < k.top + m) {
						var l = k.top + m - n.bottom + i;
						if (!f.unanimated && this._instance.options.view) {
							this._instance.jQuery
									.stop(true)
									.animate(
											{
												scrollTop : this._instance.jQuery
														.scrollTop()
														- l
											},
											{
												duration : this
														._speedFraction(
																this._instance.options.view.duration,
																k.bottom
																		- k.top,
																l),
												easing : this._instance.options.view.easing,
												complete : this
														.proxy(function() {
															this._success(g, f)
														})
											})
						} else {
							this._instance.jQuery.stop(true).get(0).scrollTop = this._instance.jQuery
									.scrollTop()
									- l;
							this._success(g, f)
						}
					} else {
						if (n.top + i > k.bottom - m) {
							var l = n.top - k.bottom + m + i;
							if (!f.unanimated && this._instance.options.view) {
								this._instance.jQuery
										.stop(true)
										.animate(
												{
													scrollTop : this._instance.jQuery
															.scrollTop()
															+ l
												},
												{
													duration : this
															._speedFraction(
																	this._instance.options.view.duration,
																	k.bottom
																			- k.top,
																	l),
													easing : this._instance.options.view.easing,
													complete : this
															.proxy(function() {
																this._success(
																		g, f)
															})
												})
							} else {
								this._instance.jQuery.stop(true).get(0).scrollTop = this._instance.jQuery
										.scrollTop()
										+ l;
								this._success(g, f)
							}
						} else {
							this._success(g, f)
						}
					}
				};
				if (this.hasParent(g)) {
					this.openPath(g, this._inner(f, {
						success : h,
						fail : f.fail
					}))
				} else {
					h.apply(this)
				}
			} else {
				this._fail(g, f)
			}
		},
		hasParent : function(f) {
			return f && (f.first().parent().parent(".aciTreeLi").length > 0)
		},
		parent : function(f) {
			return f ? f.first().parent().parent(".aciTreeLi") : c([])
		},
		topParent : function(f) {
			return this.path(f).eq(0)
		},
		_createBranch : function(h, g) {
			var f = new this._queue(this._instance.options.threads, true)
					.context(this);
			var i = this.proxy(function(k, j) {
				if (k) {
					k.first().removeClass("aciTreeFolderMaybe").addClass(
							"aciTreeFolder")
				}
				this.append(k, this._inner(g, {
					success : function(o, m) {
						var l;
						for ( var n in m.itemData) {
							l = m.itemData[n];
							if (l.childs && (l.childs instanceof Array)
									&& l.childs.length) {
								(function(q, p) {
									f.push(function(r) {
										i(q, p.childs);
										if (p.open) {
											this.open(q)
										}
										r()
									}, true)
								})(m.items.eq(n), l)
							} else {
								if (l.open) {
									this.open(m.items.eq(n), this._inner(m))
								}
							}
						}
					},
					fail : g.fail,
					itemData : j
				}))
			});
			f.push(function(j) {
				i(h, g.itemData);
				j()
			}, true).complete(function() {
				this._success(h, g)
			}).run(true)
		},
		_updateFirstLast : function(g, f) {
			if (f) {
				f.removeClass("aciTreeFirst aciTreeLast")
			}
			this.first(g).addClass("aciTreeFirst");
			this.last(g).addClass("aciTreeLast")
		},
		_setOddEven : function(f, g) {
			f.filter(":odd").removeClass(g ? "aciTreeEven" : "aciTreeOdd")
					.addClass(g ? "aciTreeOdd" : "aciTreeEven");
			f.filter(":even").removeClass(g ? "aciTreeOdd" : "aciTreeEven")
					.addClass(g ? "aciTreeEven" : "aciTreeOdd")
		},
		_updateOddEven : function(f) {
			var j = this._instance.jQuery.find(".aciTreeVisible");
			var g = 0;
			if (f) {
				f.each(function() {
					var k = j.index(this);
					if (k != -1) {
						g = Math.min(k, g)
					}
				});
				g = Math.max(g - 1, 0)
			}
			var h = true;
			if (g > 0) {
				var i = j.eq(g);
				if (i.hasClass("aciTreOdd")) {
					h = false
				}
				j = j.filter(":gt(" + g + ")")
			}
			this._setOddEven(j, h)
		},
		_updateOddEvenChilds : function(f) {
			var h = f.hasClass("aciTreeOdd");
			var g = this.childrens(f);
			this._setOddEven(g, h)
		},
		_itemHook : function(g, h, f, i) {
			if (this._instance.options.itemHook) {
				this._instance.options.itemHook.apply(this, arguments)
			}
			if (this._instance.options.callbacks.item) {
				this._instance.options.callbacks.item.call(this, g, h, f, i)
			}
		},
		_createItem : function(f, l) {
			var j = c('<li class="aciTreeLi aciTreeLevel' + l + '"></li>')
					.data("itemData" + this._instance.nameSpace,
							c.extend({}, f, {
								childs : f.childs && f.childs.length
							}));
			var k = '<div class="aciTreeLine">', g = "";
			for ( var h = 0; h < l; h++) {
				k += '<div class="aciTreeBranch aciTreeLevel' + h + '">';
				g += "</div>"
			}
			k += '<div class="aciTreeEntry"><span class="aciTreeButton"><span></span></span><span class="aciTreeItem">';
			if (f.icon) {
				if (f.icon instanceof Array) {
					k += '<span class="aciTreeIcon ' + f.icon[0]
							+ '" style="background-position:' + f.icon[1]
							+ "px " + f.icon[2] + 'px"></span>'
				} else {
					k += '<span class="aciTreeIcon ' + f.icon + '"></span>'
				}
			}
			j.append(k + '<span class="aciTreeText">' + f.label
					+ "</span></span></div>" + g + "</div>");
			if (f.isFolder || (f.isFolder === null)) {
				j
						.addClass((f.isFolder || (f.childs && f.childs.length)) ? "aciTreeFolder"
								: "aciTreeFolderMaybe")
			} else {
				j.addClass("aciTreeFile")
			}
			return j
		},
		_removeItem : function(g) {
			var f = this.parent(g);
			g.first().remove();
			this._updateFirstLast(f.length ? f : null)
		},
		_createItems : function(k, m, g, h, f) {
			if (h) {
				var n;
				if (k) {
					n = this.itemFrom(k)
				} else {
					if (m) {
						n = this.parent(m)
					} else {
						if (g) {
							n = this.parent(g)
						}
					}
				}
				var l = [], o;
				if (h instanceof Array) {
					for ( var j in h) {
						o = this._createItem(h[j], f);
						this._itemHook(n, o, h[j], f);
						l[l.length] = o.get(0)
					}
				} else {
					o = this._createItem(h, f);
					this._itemHook(n, o, h, f);
					l[l.length] = o.get(0)
				}
				l = c(l);
				if (k) {
					k.append(l)
				} else {
					if (m) {
						m.first().before(l)
					} else {
						if (g) {
							g.first().after(l)
						}
					}
				}
				return l
			}
			return c([])
		},
		_createContainer : function(g) {
			if (!g) {
				g = this._instance.jQuery
			}
			var f = g.first().children(".aciTreeUl");
			if (!f.length) {
				f = c('<ul class="aciTreeUl" style="display:none"></ul>');
				g.first().append(f)
			}
			return f
		},
		_removeContainer : function(f) {
			if (!f) {
				f = this._instance.jQuery
			}
			f.first().children(".aciTreeUl").remove()
		},
		append : function(i, g) {
			g = this._options(g, function() {
				this._trigger(i, "appended", g)
			}, function() {
				this._trigger(i, "appendfail", g)
			});
			if (i) {
				if (this.isFolder(i)) {
					if (!this._trigger(i, "beforeappend", g)) {
						this._fail(i, g);
						return
					}
					var h = this.last(i);
					var f = this._createContainer(i);
					var j = this._createItems(f, null, null, g.itemData, this
							.level(i) + 1);
					if (j.length) {
						i.first().addClass("aciTreeFolder").removeClass(
								"aciTreeFolderMaybe");
						if (h.length) {
							h.removeClass("aciTreeLast")
						} else {
							j.first().addClass("aciTreeFirst");
							j.last().addClass("aciTreeLast")
						}
						if (this.isOpenPath(i) && this.isOpen(i)) {
							j.addClass("aciTreeVisible")
						}
						this._updateOddEven(j.first());
						j.each(this.proxy(function(k) {
							this._trigger(c(k), "added", g)
						}, true))
					} else {
						if (!this.hasChildrens(i)) {
							f.remove()
						}
					}
					g.items = j;
					this._success(i, g)
				} else {
					this._fail(i, g)
				}
			} else {
				if (!this._trigger(i, "beforeappend", g)) {
					this._fail(i, g);
					return
				}
				var h = this.last();
				var f = this._createContainer();
				var j = this._createItems(f, null, null, g.itemData, 0);
				if (j.length) {
					if (h.length) {
						h.removeClass("aciTreeLast")
					} else {
						j.first().addClass("aciTreeFirst");
						j.last().addClass("aciTreeLast")
					}
					j.addClass("aciTreeVisible").last().addClass("aciTreeLast");
					this._updateOddEven();
					j.each(this.proxy(function(k) {
						this._trigger(c(k), "added", g)
					}, true));
					this
							._animate(null, true,
									!this._instance.options.animateRoot
											|| g.unanimated)
				} else {
					if (!this.hasChildrens()) {
						f.remove()
					}
				}
				g.items = j;
				this._success(i, g)
			}
		},
		before : function(h, f) {
			f = this._options(f, function() {
				this._trigger(h, "before", f)
			}, function() {
				this._trigger(h, "beforefail", f)
			});
			if (this.isItem(h)) {
				if (!this._trigger(h, "beforebefore", f)) {
					this._fail(h, f);
					return
				}
				var g = this.prev(h);
				var i = this._createItems(null, h.first(), null, f.itemData,
						this.level(h));
				if (i.length) {
					if (!g.length) {
						h.first().removeClass("aciTreeFirst");
						i.first().addClass("aciTreeFirst")
					}
					if (this.isOpenPath(h)) {
						i.addClass("aciTreeVisible")
					}
					this._updateOddEven(i.first());
					i.each(this.proxy(function(j) {
						this._trigger(c(j), "added", f)
					}, true))
				}
				f.items = i;
				this._success(h, f)
			} else {
				this._fail(h, f)
			}
		},
		after : function(h, f) {
			f = this._options(f, function() {
				this._trigger(h, "after", f)
			}, function() {
				this._trigger(h, "afterfail", f)
			});
			if (this.isItem(h)) {
				if (!this._trigger(h, "beforeafter", f)) {
					this._fail(h, f);
					return
				}
				var g = this.next(h);
				var i = this._createItems(null, null, h.first(), f.itemData,
						this.level(h));
				if (i.length) {
					if (!g.length) {
						h.first().removeClass("aciTreeLast");
						i.last().addClass("aciTreeLast")
					}
					if (this.isOpenPath(h)) {
						i.addClass("aciTreeVisible")
					}
					this._updateOddEven(i.first());
					i.each(this.proxy(function(j) {
						this._trigger(c(j), "added", f)
					}, true))
				}
				f.items = i;
				this._success(h, f)
			} else {
				this._fail(h, f)
			}
		},
		itemFrom : function(f) {
			if (f) {
				var g = c(f).first();
				if (g.get(0) == this._instance.jQuery.get(0)) {
					return c([])
				} else {
					return g.closest(".aciTreeLi")
				}
			}
			return c([])
		},
		childrens : function(g, f) {
			if (!g) {
				g = this._instance.jQuery
			}
			return f ? g.first().find(".aciTreeLi") : g.first().children(
					".aciTreeUl").children(".aciTreeLi")
		},
		visible : function(g, f) {
			g = g.filter(".aciTreeVisible");
			if (f) {
				var h = c.grep(g.get(), this.proxy(function(i) {
					return this.isVisible(c(i))
				}));
				g = c(h)
			}
			return g
		},
		folders : function(f, g) {
			if (g !== e) {
				if (g) {
					return f.filter(".aciTreeOpen")
				} else {
					return f.filter(".aciTreeFolder,.aciTreeFolderMaybe").not(
							".aciTreeOpen")
				}
			}
			return f.filter(".aciTreeFolder,.aciTreeFolderMaybe")
		},
		files : function(f) {
			return f.filter(".aciTreeFile")
		},
		isFolder : function(f) {
			return f
					&& (f.first().hasClass("aciTreeFolder") || f.first()
							.hasClass("aciTreeFolderMaybe"))
		},
		isFile : function(f) {
			return f && f.first().hasClass("aciTreeFile")
		},
		wasLoad : function(f) {
			if (!f) {
				return this._instance.jQuery.children(".aciTreeUl").length > 0
			}
			if (this.isFolder(f)) {
				return f.first().children(".aciTreeUl").length > 0
			}
			return true
		},
		setFolder : function(g, f) {
			f = this._options(f, function() {
				this._trigger(g, "folderset", f)
			}, function() {
				this._trigger(g, "folderfail", f)
			}, function() {
				this._trigger(g, "wasfolder", f)
			});
			if (this.isItem(g)) {
				if (!this._trigger(g, "beforefolder", f)) {
					this._fail(g, f);
					return
				}
				if (this.isFile(g)) {
					g.first().removeClass("aciTreeFile").addClass(
							"aciTreeFolder");
					this._success(g, f)
				} else {
					this._notify(g, f)
				}
			} else {
				this._fail(g, f)
			}
		},
		setFile : function(g, f) {
			f = this._options(f, function() {
				this._trigger(g, "fileset", f)
			}, function() {
				this._trigger(g, "filefail", f)
			}, function() {
				this._trigger(g, "wasfile", f)
			});
			if (this.isItem(g)) {
				if (!this._trigger(g, "beforefile", f)) {
					this._fail(g, f);
					return
				}
				if (this.isFolder(g)) {
					var h = function() {
						g.first().removeClass(
								"aciTreeFolder aciTreeFolderMaybe aciTreeOpen")
								.addClass("aciTreeFile");
						this._success(g, f)
					};
					if (this.wasLoad(g)) {
						this.unload(g, this._inner(f, {
							success : h,
							fail : f.fail
						}))
					} else {
						h.apply(this)
					}
				} else {
					this._notify(g, f)
				}
			} else {
				this._fail(g, f)
			}
		},
		setIcon : function(j, g) {
			g = this._options(g, null, function() {
				this._trigger(j, "iconfail", g)
			});
			if (this.isItem(j)) {
				if (!this._trigger(j, "beforeicon", g)) {
					this._fail(j, g);
					return
				}
				var i = g.icon;
				var f = this.itemData(j);
				g.oldIcon = f.icon;
				var h = j.first().children(".aciTreeLine").find(".aciTreeItem");
				var k = h.children(".aciTreeIcon");
				if (k.length) {
					if (i) {
						if (i instanceof Array) {
							k.attr("class", "aciTreeIcon " + i[0]).css(
									"background-position",
									i[1] + "px " + i[2] + "px")
						} else {
							k.attr("class", "aciTreeIcon " + i)
						}
						f.icon = i;
						this._trigger(j, "iconset", g)
					} else {
						k.remove();
						f.icon = null;
						this._trigger(j, "iconremoved", g)
					}
				} else {
					if (i) {
						if (i instanceof Array) {
							h.prepend('<div class="aciTreeIcon ' + i[0]
									+ '" style="background-position:' + i[1]
									+ "px " + i[2] + 'px"></div>')
						} else {
							h.prepend('<div class="aciTreeIcon ' + i
									+ '"></div>')
						}
						f.icon = i;
						this._trigger(j, "iconadded", g)
					} else {
						this._trigger(j, "noticon", g)
					}
				}
				this._success(j, g)
			} else {
				this._fail(j, g)
			}
		},
		getIcon : function(g) {
			var f = this.itemData(g);
			return f ? f.icon : null
		},
		setLabel : function(i, h) {
			h = this._options(h, null, function(k, j) {
				this._trigger(k, "labelfail", j)
			}, function() {
				this._trigger(i, "waslabel", h)
			});
			if (this.isItem(i)) {
				if (!this._trigger(i, "beforelabel", h)) {
					this._fail(i, h);
					return
				}
				var g = h.label;
				var f = this.itemData(i);
				h.oldLabel = f.label;
				if (g == h.oldLabel) {
					this._notify(i, h)
				} else {
					i.first().children(".aciTreeLine").find(".aciTreeText")
							.html(g);
					f.label = g;
					this._trigger(i, "labelset", h);
					this._success(i, h)
				}
			} else {
				this._fail(i, h)
			}
		},
		isOpen : function(f) {
			return f && f.first().hasClass("aciTreeOpen")
		},
		isClosed : function(f) {
			return !this.isOpen(f)
		},
		hasChildrens : function(f) {
			if (!f) {
				f = this._instance.jQuery
			}
			return f.first().children(".aciTreeUl")
					.children(".aciTreeLi:first").length > 0
		},
		hasSiblings : function(f) {
			return f && (f.first().siblings(".aciTreeLi:first").length > 0)
		},
		hasPrev : function(f) {
			return this.prev(f).length > 0
		},
		hasNext : function(f) {
			return this.next(f).length > 0
		},
		siblings : function(f) {
			return f ? f.first().siblings(".aciTreeLi") : c([])
		},
		prev : function(f) {
			return f ? f.first().prev(".aciTreeLi") : c([])
		},
		next : function(f) {
			return f ? f.first().next(".aciTreeLi") : c([])
		},
		level : function(f) {
			var g = -1;
			if (f) {
				f = f.first();
				while (f.hasClass("aciTreeLi")) {
					f = f.parent().parent();
					g++
				}
			}
			return g
		},
		getId : function(g) {
			var f = this.itemData(g);
			return f ? f.id : null
		},
		itemData : function(f) {
			return f ? f.first().data("itemData" + this._instance.nameSpace)
					: null
		},
		setId : function(h, g) {
			g = this._options(g, null, function() {
				this._trigger(h, "idfail", g)
			}, function() {
				this._trigger(h, "wasid", g)
			});
			if (this.isItem(h)) {
				if (!this._trigger(h, "beforeid", g)) {
					this._fail(h, g);
					return
				}
				var i = g.id;
				var f = this.itemData(h);
				g.oldId = f.id;
				if (i == g.oldId) {
					this._notify(h, g)
				} else {
					f.id = i;
					this._trigger(h, "idset", g);
					this._success(h, g)
				}
			} else {
				this._fail(h, g)
			}
		},
		getIndex : function(f) {
			return f ? f.first().parent().children(".aciTreeLi").index(
					f.first()) : null
		},
		setIndex : function(i, g) {
			var f = g.index;
			g = this._options(g, null, function() {
				this._trigger(i, "indexfail", g)
			}, function() {
				this._trigger(i, "wasindex", g)
			});
			if (this.isItem(i)) {
				if (!this._trigger(i, "beforeindex", g)) {
					this._fail(i, g);
					return
				}
				g.oldIndex = this.getIndex(i);
				var j = this.siblings(i);
				if ((f != g.oldIndex) && j.length) {
					if (f < 1) {
						j.first().before(i)
					} else {
						if (f >= j.length) {
							j.last().after(i)
						} else {
							j.eq(f).before(i)
						}
					}
					var h = this.parent(i);
					this._updateFirstLast(h.length ? h : null, i.add([
							j.get(0), j.get(-1) ]));
					this._updateOddEven(h);
					this._trigger(i, "indexset", g);
					this._success(i, g)
				} else {
					this._notify(i, g)
				}
			} else {
				this._fail(i, g)
			}
		},
		getLabel : function(g) {
			var f = this.itemData(g);
			return f ? f.label : null
		},
		isItem : function(f) {
			return f && f.first().hasClass("aciTreeLi")
		},
		_animate : function(i, j, h, k) {
			if (!i) {
				i = this._instance.jQuery
			}
			if (!h) {
				var g = j ? this._instance.options.show
						: this._instance.options.hide;
				if (g) {
					var f = i.first().children(".aciTreeUl");
					if (f.length) {
						f.stop(true, true).animate(g.props, {
							duration : g.duration,
							easing : g.easing,
							complete : k ? this.proxy(k) : null
						})
					} else {
						if (k) {
							k.apply(this)
						}
					}
					return
				}
			}
			i.first().children(".aciTreeUl").stop(true, true).toggle(j);
			if (k) {
				k.apply(this)
			}
		},
		first : function(f) {
			if (!f) {
				f = this._instance.jQuery
			}
			return f.first().children(".aciTreeUl")
					.children(".aciTreeLi:first")
		},
		isFirst : function(g) {
			if (g) {
				var f = this.parent(g);
				return this.first(f.length ? f : null).is(g.first())
			}
			return false
		},
		last : function(f) {
			if (!f) {
				f = this._instance.jQuery
			}
			return f.first().children(".aciTreeUl").children(".aciTreeLi:last")
		},
		isLast : function(g) {
			if (g) {
				var f = this.parent(g);
				return this.last(f.length ? f : null).is(g.first())
			}
			return false
		},
		isBusy : function(f) {
			if (f) {
				return f.first().hasClass("aciTreeLoad")
			} else {
				return !this._private.loadQueue.empty()
			}
		},
		_loading : function(f, g) {
			if (f) {
				f.first().toggleClass("aciTreeLoad", g)
			} else {
				if (g) {
					this._loader(g)
				}
			}
		},
		_loader : function(f) {
			if (f || this.isBusy()) {
				if (!this._private.loaderInterval) {
					this._private.loaderInterval = b.setInterval(this
							.proxy(function() {
								this._loader()
							}), this._instance.options.loaderDelay)
				}
				this._instance.jQuery.toggleClass("aciTreeLoad", true);
				b.clearTimeout(this._private.loaderHide);
				this._private.loaderHide = b.setTimeout(this.proxy(function() {
					this._instance.jQuery.toggleClass("aciTreeLoad", false)
				}), this._instance.options.loaderDelay * 2)
			}
		},
		isChildren : function(g, f) {
			if (!g) {
				g = this._instance.jQuery
			}
			return f && (g.has(f).length > 0)
		},
		isImmediateChildren : function(g, f) {
			if (!g) {
				g = this._instance.jQuery
			}
			return f && g.children(".aciTreeUl").children(".aciTreeLi").is(f)
		},
		sameParent : function(h, f) {
			if (h && f) {
				var i = this.parent(h);
				var g = this.parent(f);
				return (!i.length && !g.length) || (i.get(0) == g.get(0))
			}
			return false
		},
		sameTopParent : function(h, f) {
			if (h && f) {
				var i = this.topParent(h);
				var g = this.topParent(f);
				return (!i.length && !g.length) || (i.get(0) == g.get(0))
			}
			return false
		},
		destroy : function(f) {
			f = this._options(f);
			if (!this.wasInit()) {
				this._trigger(null, "notinit", f);
				this._fail(null, f);
				return
			}
			if (this.isLocked()) {
				this._trigger(null, "locked", f);
				this._fail(null, f);
				return
			}
			if (!this._trigger(null, "beforedestroy", f)) {
				this._trigger(null, "destroyfail", f);
				this._fail(null, f);
				return
			}
			this._instance.locked = true;
			this._instance.jQuery.toggleClass("aciTreeLoad", true);
			this._private.loadQueue.destroy();
			this._destroyHook(false);
			this.unload(null, this._inner(f, {
				success : this.proxy(function() {
					b.clearTimeout(this._private.loaderHide);
					b.clearInterval(this._private.loaderInterval);
					this._destroyHook(true);
					this._instance.jQuery.unbind(this._instance.nameSpace).off(
							this._instance.nameSpace, ".aciTreeButton").off(
							this._instance.nameSpace, ".aciTreeLine");
					this._instance.jQuery.removeClass(
							"aciTree" + this._instance.index).toggleClass(
							"aciTreeLoad", false);
					this._instance.locked = false;
					this._super();
					this._trigger(null, "destroyed", f);
					this._success(null, f)
				}),
				fail : function() {
					this._instance.jQuery.toggleClass("aciTreeLoad", false);
					this._instance.locked = false;
					this._trigger(null, "destroyfail", f);
					this._fail(null, f)
				}
			}))
		},
		_destroyHook : function(f) {
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.aciPluginUi.extend(d,
			"aciTreeCore");
	aciPluginClass.publish("aciTree", a)
})(jQuery, this);

// utils
(function(c, b, d) {
	var a = {
		__extend : function() {
			c.extend(this._private, {
				branchQueue : new this._queue(this._instance.options.threads,
						true).context(this)
			});
			this._super()
		},
		update : function(g, e) {
			e = this._options(e, function() {
				this._trigger(g, "updated", e)
			}, function() {
				this._trigger(g, "updatefail", e)
			});
			if (this.isItem(g)) {
				if (!this._trigger(g, "beforeupdate", e)) {
					this._fail(g, e);
					return
				}
				var f = function() {
					if (e.itemData.id !== d) {
						this.setId(g, {
							id : e.itemData.id
						})
					}
					if (e.itemData.label !== d) {
						this.setLabel(g, {
							label : e.itemData.label
						})
					}
					if (e.itemData.icon !== d) {
						this.setIcon(g, {
							icon : e.itemData.icon
						})
					}
				};
				if (e.itemData.isFolder || (e.itemData.isFolder === null)) {
					var h = function() {
						f.apply(this);
						g
								.first()
								.removeClass("aciTreeFolder aciTreeFolderMaybe")
								.addClass(
										(e.itemData.isFolder || (e.itemData.childs && e.itemData.childs.length)) ? "aciTreeFolder"
												: "aciTreeFolderMaybe");
						if (e.itemData.childs) {
							if (this.wasLoad(g)) {
								this.unload(g, this._inner(e, {
									success : function() {
										this.loadFrom(g, this._inner(e, {
											success : e.success,
											fail : e.fail,
											itemData : e.itemData.childs
										}))
									},
									fail : e.fail
								}))
							} else {
								this.loadFrom(g, this._inner(e, {
									success : e.success,
									fail : e.fail,
									itemData : e.itemData.childs
								}))
							}
						} else {
							this._success(g, e)
						}
					};
					if (this.isFolder(g)) {
						h.apply(this)
					} else {
						this.setFolder(g, this._inner(e, {
							success : h,
							fail : e.fail
						}))
					}
				} else {
					if (this.isFile(g)) {
						f.apply(this)
					} else {
						this.setFile(g, this._inner(e, {
							success : f,
							fail : e.fail
						}))
					}
				}
			} else {
				this._fail(g, e)
			}
		},
		branch : function(e, h, f) {
			var g = this.proxy(function(j, l, i) {
				var k = i ? this.next(j) : this.first(j);
				if (k.length) {
					if (this.isFolder(k)) {
						if (this.wasLoad(k)) {
							this._private.branchQueue.push(function() {
								l.call(this, k);
								g(k, l);
								g(k, l, true)
							}).run()
						} else {
							if (f) {
								this._private.branchQueue.push(function(m) {
									this.ajaxLoad(k, {
										success : function() {
											l.call(this, k);
											g(k, l);
											g(k, l, true);
											m()
										},
										fail : function() {
											g(k, l, true);
											m()
										}
									})
								}, true).run()
							} else {
								this._private.branchQueue.push(function() {
									l.call(this, k);
									g(k, l, true)
								}).run()
							}
						}
					} else {
						this._private.branchQueue.push(function() {
							l.call(this, k);
							g(k, l, true)
						}).run()
					}
				}
			});
			g(e, h)
		},
		isBusy : function(e) {
			if (e) {
				return this._super(e)
			} else {
				return this._super(e) || !this._private.branchQueue.empty()
			}
		},
		swap : function(g) {
			g = this._options(g, null, function() {
				this._trigger(null, "swapfail", g)
			});
			var f = g.item1;
			var e = g.item2;
			if (this.isItem(f) && this.isItem(e) && !this.isChildren(f, e)
					&& !this.isChildren(e, f) && (f.get(0) != e.get(0))) {
				if (!this._trigger(null, "beforeswap", g)) {
					this._fail(null, g);
					return
				}
				f = f.first();
				e = e.first();
				var j = this.prev(f);
				if (j.length) {
					if (e.get(0) == j.get(0)) {
						e.before(f)
					} else {
						f.insertAfter(e);
						e.insertAfter(j)
					}
				} else {
					var i = this.next(f);
					if (i.length) {
						if (e.get(0) == i.get(0)) {
							e.after(f)
						} else {
							f.insertAfter(e);
							e.insertBefore(i)
						}
					} else {
						var h = f.parent();
						f.insertAfter(e);
						h.append(e)
					}
				}
				this._updateLevel(f);
				var h = this.parent(f);
				this._updateFirstLast(h.length ? h : null, f);
				this._updateVisibleState(h.length ? h : null, f);
				this._updateLevel(e);
				h = this.parent(e);
				this._updateFirstLast(h.length ? h : null, e);
				this._updateVisibleState(h.length ? h : null, e);
				this._updateOddEven(f.add(e));
				this._trigger(null, "swapped", g);
				this._success(null, g)
			} else {
				this._fail(null, g)
			}
		},
		_updateItemLevel : function(j, e, g) {
			j.removeClass("aciTreeLevel" + e).addClass("aciTreeLevel" + g);
			var h = j.children(".aciTreeLine").find(".aciTreeEntry");
			if (e < g) {
				for ( var f = e; f < g; f++) {
					h.wrap('<div class="aciTreeBranch aciTreeLevel' + f
							+ '"></div>')
				}
			} else {
				if (e > g) {
					for ( var f = g; f < e; f++) {
						h.unwrap()
					}
				}
			}
		},
		_updateChildLevel : function(g, e, f) {
			this.childrens(g).each(this.proxy(function(h) {
				var i = c(h);
				this._updateItemLevel(i, e, f);
				if (this.isFolder(i)) {
					this.childrens(i).each(this.proxy(function(j) {
						this._updateChildLevel(c(j), e + 1, f + 1)
					}, true))
				}
			}, true))
		},
		_updateLevel : function(e) {
			var g = this.level(e);
			var f = b.parseInt(e.attr("class").match(/aciTreeLevel[0-9]+/)[0]
					.match(/[0-9]+/));
			if (g != f) {
				this._updateItemLevel(e, f, g);
				this._updateChildLevel(e, f + 1, g + 1)
			}
		},
		_updateVisibleState : function(e, f) {
			if (e) {
				if (this.isOpenPath(e) && this.isOpen(e)) {
					f.first().addClass("aciTreeVisible");
					this._updateVisible(f, true)
				} else {
					this._updateVisible(f, false);
					f.first().removeClass("aciTreeVisible")
				}
			} else {
				f.first().addClass("aciTreeVisible");
				this._updateVisible(f, true)
			}
		},
		moveUp : function(f, e) {
			e = this._options(e);
			e.index = b.Math.max(this.getIndex(f) - 1, 0);
			this.setIndex(f, e)
		},
		moveDown : function(f, e) {
			e = this._options(e);
			e.index = b.Math.min(this.getIndex(f) + 1, this.siblings(f).length);
			this.setIndex(f, e)
		},
		moveFirst : function(f, e) {
			e = this._options(e);
			e.index = 0;
			this.setIndex(f, e)
		},
		moveLast : function(f, e) {
			e = this._options(e);
			e.index = this.siblings(f).length;
			this.setIndex(f, e)
		},
		moveBefore : function(h, e) {
			e = this._options(e, null, function() {
				this._trigger(h, "movefail", e)
			}, function() {
				this._trigger(h, "wasbefore", e)
			});
			var i = e.before;
			if (this.isItem(h) && this.isItem(i) && !this.isChildren(h, i)
					&& (h.get(0) != i.get(0))) {
				if (!this._trigger(h, "beforemove", e)) {
					this._fail(h, e);
					return
				}
				if (this.prev(i).get(0) == h.get(0)) {
					this._notify(h, e)
				} else {
					h = h.first();
					i = i.first();
					var f = this.parent(h);
					var g = this.prev(h);
					if (!g.length) {
						g = f.length ? f : this.first()
					}
					h.insertBefore(i);
					if (f.length && !this.hasChildrens(f)) {
						this.setFile(f)
					}
					this._updateLevel(h);
					this._updateFirstLast(f.length ? f : null);
					f = this.parent(h);
					this._updateFirstLast(f.length ? f : null, h.add(i));
					this._updateVisibleState(f.length ? f : null, h);
					this._updateOddEven(h.add(i).add(g));
					this._trigger(h, "moved", e);
					this._success(h, e)
				}
			} else {
				this._fail(h, e)
			}
		},
		moveAfter : function(h, e) {
			e = this._options(e, null, function() {
				this._trigger(h, "movefail", e)
			}, function() {
				this._trigger(h, "wasafter", e)
			});
			var i = e.after;
			if (this.isItem(h) && this.isItem(i) && !this.isChildren(h, i)
					&& (h.get(0) != i.get(0))) {
				if (!this._trigger(h, "beforemove", e)) {
					this._fail(h, e);
					return
				}
				if (this.next(i).get(0) == h.get(0)) {
					this._notify(h, e)
				} else {
					h = h.first();
					i = i.first();
					var f = this.parent(h);
					var g = this.prev(h);
					if (!g.length) {
						g = f.length ? f : this.first()
					}
					h.insertAfter(i);
					if (f.length && !this.hasChildrens(f)) {
						this.setFile(f)
					}
					this._updateLevel(h);
					this._updateFirstLast(f.length ? f : null);
					f = this.parent(h);
					this._updateFirstLast(f.length ? f : null, h.add(i));
					this._updateVisibleState(f.length ? f : null, h);
					this._updateOddEven(h.add(i).add(g));
					this._trigger(h, "moved", e);
					this._success(h, e)
				}
			} else {
				this._fail(h, e)
			}
		},
		asChild : function(g, e) {
			e = this._options(e, null, function() {
				this._trigger(g, "childfail", e)
			});
			var f = e.parent;
			if (this.isItem(g) && this.isItem(f) && !this.isChildren(g, f)
					&& !this.hasChildrens(f) && (g.get(0) != f.get(0))) {
				if (!this._trigger(g, "beforechild", e)) {
					this._fail(g, e);
					return
				}
				g = g.first();
				f = f.first();
				var h = function() {
					var j = this.parent(g);
					var k = this.prev(g);
					if (!k.length) {
						k = j.length ? j : this.first()
					}
					var i = this._createContainer(f);
					i.append(g);
					if (j.length && !this.hasChildrens(j)) {
						this.setFile(j)
					}
					this._updateLevel(g);
					this._updateFirstLast(j.length ? j : null);
					this._updateFirstLast(f.length ? f : null, g);
					this._updateVisibleState(f.length ? f : null, g);
					this._updateOddEven(g.add(k));
					this._trigger(g, "childset", e);
					this._success(g, e)
				};
				if (this.isFolder(f)) {
					h.apply(this)
				} else {
					this.setFolder(f, this._inner(e, {
						success : h,
						fail : e.fail
					}))
				}
			} else {
				this._fail(g, e)
			}
		},
		_search : function(m, j) {
			var l = this.childrens(m);
			var n, e, g, p, k = false;
			for ( var h = 0, o = l.length; h < o; h++) {
				n = l.eq(h);
				e = b.String(this.getId(n));
				g = e.length;
				if (g) {
					if (e == j.substr(0, g)) {
						p = n;
						k = j.length == g;
						break
					}
				}
			}
			if (p) {
				if (!k) {
					var f = this._search(p, j);
					if (f) {
						return f
					}
				}
				return {
					item : p,
					exact : k
				}
			} else {
				return null
			}
		},
		searchId : function(i, g, e) {
			e = this._options(e);
			var j = e.id;
			if (i) {
				if (g) {
					var h = this.proxy(function(k) {
						var l = this._search(k, j);
						if (l) {
							if (l.exact) {
								this._success(l.item, e)
							} else {
								if (this.wasLoad(l.item)) {
									this._fail(k, e)
								} else {
									this.ajaxLoad(l.item, this._inner(e, {
										success : function() {
											h(l.item)
										},
										fail : e.fail
									}))
								}
							}
						} else {
							this._fail(k, e)
						}
					});
					h()
				} else {
					var f = this._search(null, j);
					if (f && f.exact) {
						this._success(f.item, e)
					} else {
						this._fail(null, e)
					}
				}
			} else {
				var f = c();
				this._instance.jQuery.find(".aciTreeLi").each(
						this.proxy(function(k) {
							if (j == this.getId(c(k))) {
								f = c(k);
								return false
							}
						}, true));
				if (f.length) {
					this._success(f, e)
				} else {
					this._fail(null, e)
				}
			}
		},
		_destroyHook : function(e) {
			if (!e) {
				this._private.branchQueue.destroy()
			}
			this._super(e)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(a,
			"aciTreeUtils")
})(jQuery, this);

// selectable
(function(c, b, d) {
	var a = {
		selectable : true,
		fullRow : false,
		textSelection : false
	};
	var e = {
		__extend : function() {
			c.extend(this._instance, {
				focus : false
			});
			c.extend(this._private, {
				blurTimeout : null,
				focus : null
			});
			this._super()
		},
		hasFocus : function() {
			return this._instance.focus
		},
		_lastFocus : function() {
			return (this._instance.focus && this._private.focus) ? this._private.focus
					: c([])
		},
		_focus : function(f) {
			b.clearTimeout(this._private.blurTimeout);
			this._private.focus = f;
			if (!this._instance.focus) {
				this._instance.focus = true;
				this._instance.jQuery.addClass("aciTreeFocus");
				this._trigger(null, "focused")
			}
		},
		_blur : function() {
			b.clearTimeout(this._private.blurTimeout);
			this._private.blurTimeout = b.setTimeout(this.proxy(function() {
				if (this._instance.focus) {
					this._instance.focus = false;
					this._instance.jQuery.removeClass("aciTreeFocus");
					this._trigger(null, "blurred")
				}
			}), 10)
		},
		_initSelectable : function() {
			if (this._instance.jQuery.attr("tabindex") === d) {
				this._instance.jQuery.attr("tabindex", 0)
			}
			this._instance.jQuery
					.bind("focusin" + this._private.nameSpace,
							this.proxy(function(f) {
								this._focus(c(f.target))
							}))
					.bind("focusout" + this._private.nameSpace,
							this.proxy(function() {
								this._blur()
							}))
					.bind(
							"keydown" + this._private.nameSpace,
							this
									.proxy(function(h) {
										if (!this._instance.focus) {
											return
										}
										var f = this.selected();
										if (f.length && this.isBusy(f)) {
											return false
										}
										var g = c([]);
										switch (h.which) {
										case 38:
											g = f.length ? this._prevOpen(f)
													: this.first();
											break;
										case 40:
											g = f.length ? this._nextOpen(f)
													: this.first();
											break;
										case 37:
											if (f.length) {
												if (this.isOpen(f)) {
													this
															.close(
																	f,
																	{
																		collapse : this._instance.options.collapse,
																		expand : this._instance.options.expand,
																		unique : this._instance.options.unique
																	})
												} else {
													g = this.parent(f)
												}
											} else {
												g = this.first()
											}
											break;
										case 39:
											if (f.length) {
												if (this.isFolder(f)
														&& this.isClosed(f)) {
													this
															.open(
																	f,
																	{
																		collapse : this._instance.options.collapse,
																		expand : this._instance.options.expand,
																		unique : this._instance.options.unique
																	})
												} else {
													g = this.first(f)
												}
											} else {
												g = this.first()
											}
											break;
										case 33:
											g = f.length ? this._prevPage(f)
													: this.first();
											break;
										case 34:
											g = f.length ? this._nextPage(f)
													: this.first();
											break;
										case 36:
											g = this.first();
											break;
										case 35:
											g = this._lastOpen();
											break;
										case 13:
											if (f.length && this.isFolder(f)
													&& this.isClosed(f)) {
												this
														.open(
																f,
																{
																	collapse : this._instance.options.collapse,
																	expand : this._instance.options.expand,
																	unique : this._instance.options.unique
																})
											}
											break;
										case 27:
											if (f.length && this.isOpen(f)) {
												this
														.close(
																f,
																{
																	collapse : this._instance.options.collapse,
																	expand : this._instance.options.expand,
																	unique : this._instance.options.unique
																})
											}
											break;
										case 32:
											if (f.length && this.isFolder(f)) {
												this
														.toggle(
																f,
																{
																	collapse : this._instance.options.collapse,
																	expand : this._instance.options.expand,
																	unique : this._instance.options.unique
																})
											}
											break
										}
										if (g.length) {
											if (!this.isSelected(g)) {
												if (!this.isVisible(g)) {
													this.setVisible(g)
												}
												this.select(g, {
													select : true
												});
												return false
											} else {
												if (!this.isVisible(g)) {
													this.setVisible(g);
													return false
												}
											}
										}
									}));
			this._fullRow(this._instance.options.fullRow)
		},
		_fullRow : function(f) {
			this._instance.jQuery.off(this._private.nameSpace,
					".aciTreeLine,.aciTreeItem").off(this._private.nameSpace,
					".aciTreeItem");
			this._instance.jQuery.on("click" + this._private.nameSpace,
					f ? ".aciTreeLine,.aciTreeItem" : ".aciTreeItem",
					this.proxy(function(h) {
						var g = this.itemFrom(h.target);
						if (!this.isVisible(g)) {
							this.setVisible(g)
						}
						if (!this.isSelected(g)) {
							this.select(g, {
								select : true
							})
						}
					})).on("dblclick" + this._private.nameSpace,
					f ? ".aciTreeLine,.aciTreeItem" : ".aciTreeItem",
					this.proxy(function(h) {
						var g = this.itemFrom(h.target);
						if (this.isFolder(g)) {
							this.toggle(g, {
								collapse : this._instance.options.collapse,
								expand : this._instance.options.expand,
								unique : this._instance.options.unique
							});
							return false
						} else {
							this._trigger(g, "dblclick", f);
							return false;
						}
					}))
		},
		_initHook : function() {
			if (this.isSelectable()) {
				this._initSelectable()
			}
			this._super()
		},
		_itemHook : function(g, h, f, i) {
			if (!this._instance.options.textSelection) {
				this._selectable(h.children(".aciTreeLine")
						.find(".aciTreeItem"))
			}
			this._super(g, h, f, i)
		},
		_selectable : function(f, g) {
			if (g) {
				f.css({
					"-webkit-user-select" : "text",
					"-moz-user-select" : "text",
					"-ms-user-select" : "text",
					"-o-user-select" : "text",
					"user-select" : "text"
				}).attr({
					unselectable : null,
					onselectstart : null
				}).unbind("selectstart" + this._private.nameSpace)
			} else {
				f.css({
					"-webkit-user-select" : "none",
					"-moz-user-select" : "-moz-none",
					"-ms-user-select" : "none",
					"-o-user-select" : "none",
					"user-select" : "none"
				}).attr({
					unselectable : "on",
					onselectstart : "return false"
				}).bind("selectstart" + this._private.nameSpace, function() {
					return true
				})
			}
		},
		_lastOpen : function(f) {
			var g = this.proxy(function(i) {
				var h = this.last(i);
				if (this.isOpen(h)) {
					return g(h)
				} else {
					return h
				}
			});
			if (!f) {
				f = this.last()
			}
			if (this.isOpen(f)) {
				return g(f)
			} else {
				return f
			}
		},
		_prevOpen : function(h) {
			var g = this.prev(h);
			if (g.length) {
				return this._lastOpen(g)
			} else {
				var f = this.parent(h);
				return f.length ? f : h
			}
		},
		_nextOpen : function(g) {
			var h = this.proxy(function(k) {
				var j = this.parent(k);
				if (j.length) {
					var i = this.next(j);
					if (i.length) {
						return i
					} else {
						return h(j)
					}
				}
				return null
			});
			if (this.isOpen(g)) {
				return this.first(g)
			} else {
				var f = this.next(g);
				if (f.length) {
					return f
				} else {
					f = h(g);
					return f ? f : g
				}
			}
		},
		_itemHeight : function(g) {
			var f = g.first().children(".aciTreeLine").find(".aciTreeItem");
			return f.outerHeight(true)
		},
		_prevPage : function(i) {
			var f = this._itemHeight(i);
			var j = this._instance.jQuery.height();
			var h = c([]), g = i;
			do {
				g = this._prevOpen(g);
				if (g.length) {
					if (g.get(0) == h.get(0)) {
						break
					}
					f += this._itemHeight(g);
					h = g
				} else {
					break
				}
			} while (f < j);
			return g
		},
		_nextPage : function(i) {
			var f = this._itemHeight(i);
			var j = this._instance.jQuery.height();
			var h = c([]), g = i;
			do {
				g = this._nextOpen(g);
				if (g.length) {
					if (g.get(0) == h.get(0)) {
						break
					}
					f += this._itemHeight(g);
					h = g
				} else {
					break
				}
			} while (f < j);
			return g
		},
		_selectHook : function(f, g) {
		},
		select : function(i, h) {
			h = this._options(h, null, function() {
				this._trigger(i, "selectfail", h)
			});
			if (this.isSelectable() && this.isItem(i)) {
				if (!this._trigger(i, "beforeselect", h)) {
					this._fail(i, h);
					return
				}
				var f = h.select;
				var g = this._instance.jQuery.find(".aciTreeSelected");
				if (f) {
					g = g.not(i.first())
				}
				h.oldSelected = this.selected();
				g.removeClass("aciTreeSelected").each(this.proxy(function(j) {
					this._trigger(c(j), "unselected", h)
				}, true));
				if (f) {
					if (this.isSelected(i)) {
						this._trigger(i, "wasselected", h)
					} else {
						i.first().addClass("aciTreeSelected");
						this._selectHook(h.oldSelected, i);
						this._trigger(i, "selected", h)
					}
				}
				this._success(i, h)
			} else {
				this._fail(i, h)
			}
		},
		selected : function() {
			return this._instance.jQuery.find(".aciTreeSelected:first")
		},
		isSelected : function(f) {
			return f && f.first().hasClass("aciTreeSelected")
		},
		isSelectable : function() {
			return this._instance.options.selectable
		},
		option : function(f, g) {
			if (this.wasInit() && !this.isLocked()) {
				if ((f == "selectable") && (g != this.isSelectable())) {
					if (g) {
						this._initSelectable()
					} else {
						this._doneSelectable()
					}
				}
				if ((f == "fullRow") && (g != this._instance.options.fullRow)) {
					this._fullRow(g)
				}
				if ((f == "textSelection")
						&& (g != this._instance.options.textSelection)) {
					if (g) {
						this._instance.jQuery.find(".aciTreeItem").each(
								this.proxy(function(h) {
									this._selectable(c(h), true)
								}, true))
					} else {
						this._instance.jQuery.find(".aciTreeItem").each(
								this.proxy(function(h) {
									this._selectable(c(h))
								}, true))
					}
				}
			}
			this._super(f, g)
		},
		_doneSelectable : function(f) {
			if (this._instance.jQuery.attr("tabindex") == "0") {
				this._instance.jQuery.removeAttr("tabindex")
			}
			this._instance.jQuery.unbind(this._private.nameSpace);
			this._instance.jQuery.off(this._private.nameSpace, ".aciTreeItem");
			this._instance.jQuery.removeClass("aciTreeFocus");
			this._instance.focus = false;
			if (!f) {
				var g = this.selected();
				if (g.length) {
					this.select(g, {
						select : false
					})
				}
			}
		},
		_destroyHook : function(f) {
			if (f) {
				this._doneSelectable(true)
			}
			this._super(f)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(e,
			"aciTreeSelectable");
	aciPluginClass.defaults("aciTree", a)
})(jQuery, this);

// checkbox (works best with selectable)
(function(d, c, e) {
	var b = {
		checkbox : false,
		checkboxName : "check[]",
		checkboxChain : true
	};
	var a = {
		_initCheckbox : function() {
			this._instance.jQuery
					.bind(
							"acitree" + this._private.nameSpace,
							function(j, h, i, f, g) {
								switch (f) {
								case "loaded":
									if (i
											&& (h._instance.options.checkboxChain !== false)) {
										h._loadCheckbox(i)
									}
									break;
								case "focused":
									h._checkbox(h.selected()).focus();
									break;
								case "selected":
									h._checkbox(i).focus();
									break
								}
							})
					.bind(
							"keydown" + this._private.nameSpace,
							this
									.proxy(function(g) {
										switch (g.which) {
										case 9:
										case 32:
											if (this.isSelectable) {
												var f = this.selected();
												if (this.hasCheckbox(f)) {
													if (this._lastFocus()
															.get(0) == this._instance.jQuery
															.get(0)) {
														this._checkbox(f)
																.focus()
																.trigger(g)
													}
													g
															.stopImmediatePropagation()
												}
											}
											break
										}
									})).on("click" + this._private.nameSpace,
							".aciTreeItem", this.proxy(function(g) {
								if (d(g.target).hasClass("aciTreeItem")) {
									var f = this.itemFrom(g.target);
									if (this.hasCheckbox(f)) {
										this._checkbox(f).focus();
										this.check(f, {
											check : !this.isChecked(f)
										});
										g.preventDefault()
									}
								}
							})).on("focus" + this._private.nameSpace,
							"input[type=checkbox]", this.proxy(function(g) {
								var f = this.itemFrom(g.target);
								if (this.isSelectable && !this.isSelected(f)) {
									this.select(f, true)
								}
							})).on("click" + this._private.nameSpace,
							"input[type=checkbox]", this.proxy(function(f, h) {
								var g = this.itemFrom(h.target);
								this.check(g, {
									check : d(f).is(":checked")
								})
							}, true)).on("keydown" + this._private.nameSpace,
							"input[type=checkbox]", this.proxy(function(g) {
								switch (g.which) {
								case 38:
								case 40:
								case 37:
								case 39:
								case 33:
								case 34:
								case 36:
								case 35:
								case 13:
								case 27:
									g.preventDefault();
									break;
								case 9:
								case 32:
									if (this.isSelectable) {
										var f = this.itemFrom(g.target);
										if (!this.isSelected(f)) {
											return false
										}
									}
									g.stopPropagation();
									break
								}
							}))
		},
		_checkbox : function(f) {
			return f ? f.first().children(".aciTreeLine").find(
					"input[type=checkbox]") : d([])
		},
		_initHook : function() {
			if (this.isCheckbox()) {
				this._initCheckbox()
			}
			this._super()
		},
		_itemHook : function(h, i, f, j) {
			if (this.isCheckbox()) {
				var g = this.isRadio && this.hasRadio(i);
				if (!g && (f.checkbox || (f.checkbox === e))) {
					this._addCheckbox(i, f)
				}
			}
			this._super(h, i, f, j)
		},
		_selectHook : function(g, h) {
			var f = this._super(g, h);
			if (f) {
				return true
			}
			if (this.isCheckbox() && this.hasCheckbox(g)
					&& !this.hasCheckbox(h)) {
				var i = this._checkbox(g);
				if (i.is(":focus")) {
					i.blur();
					this._instance.jQuery.focus();
					return true
				}
			}
		},
		_addCheckbox : function(h, f) {
			var g = f.checkboxName ? f.checkboxName
					: this._instance.options.checkboxName;
			h.first().addClass("aciTreeCheckbox").children(".aciTreeLine")
					.find(".aciTreeText").wrap("<label></label>").before(
							'<input type="checkbox" name="' + g + '" value="'
									+ this.getId(h) + '"'
									+ (f.checked ? ' checked="checked"' : "")
									+ " />")
		},
		_removeCheckbox : function(g) {
			var f = g.first().removeClass("aciTreeCheckbox").children(
					".aciTreeLine").find("label");
			if (f.length) {
				f.find("*").not(".aciTreeText").remove();
				f.find(".aciTreeText").unwrap()
			}
		},
		setId : function(g, f) {
			f = this._options(f, function(h) {
				if (this.isCheckbox() && this.hasCheckbox(h)) {
					this._checkbox(h).attr("value", this.getId(h))
				}
			});
			this._super(g, f)
		},
		_loadCheckbox : function(f) {
			if (this.hasCheckbox(f)) {
				if (this.isChecked(f)) {
					if (this.checkboxes(this.childrens(f), true).length) {
						this._parentCheckbox(f)
					} else {
						this._childCheckbox(f)
					}
				} else {
					this._childCheckbox(f)
				}
			}
		},
		_childCheckbox : function(f) {
			if (this._instance.options.checkboxChain === -1) {
				return
			}
			var g = this._checkbox(f).removeClass("aciTreeTristate").is(
					":checked");
			var h = this.proxy(function(i) {
				this.checkboxes(this.childrens(i)).each(
						this.proxy(function(j) {
							this._checkbox(d(j)).prop("checked", g)
									.removeClass("aciTreeTristate");
							h(d(j))
						}, true))
			});
			h(f)
		},
		_parentCheckbox : function(f) {
			if (this._instance.options.checkboxChain === 1) {
				return
			}
			this
					.path(f, true)
					.each(
							this
									.proxy(
											function(g) {
												if (!this.hasCheckbox(d(g))) {
													return false
												}
												var j = this.checkboxes(this
														.childrens(d(g)));
												if (j.length) {
													var i = this.checkboxes(j,
															true).length;
													if (i) {
														var h = (i != j.length)
																|| (j
																		.find(".aciTreeTristate").length > 0);
														this
																._checkbox(d(g))
																.prop(
																		"checked",
																		true)
																.toggleClass(
																		"aciTreeTristate",
																		h)
													} else {
														this
																._checkbox(d(g))
																.prop(
																		"checked",
																		false)
																.removeClass(
																		"aciTreeTristate")
													}
												} else {
													this
															._checkbox(d(g))
															.removeClass(
																	"aciTreeTristate")
												}
											}, true))
		},
		hasCheckbox : function(f) {
			return f && f.hasClass("aciTreeCheckbox")
		},
		_stateCheckbox : function(i, f) {
			var g = this.parent(i);
			var j = this.checkboxes(this.childrens(i));
			var h = this.checkboxes(j, true);
			if (this.hasCheckbox(g)) {
				if (this.isChecked(g)) {
					var k = this.checkboxes(this.siblings(i));
					if (k.length) {
						if (h.length) {
							this._parentCheckbox(h)
						} else {
							this._parentCheckbox(i)
						}
					} else {
						if (this._instance.options.checkboxChain !== -1) {
							this._checkbox(i).prop("checked", true)
						}
						this._trigger(i, "checkboxadded", f);
						if (j.length && !h.length
								&& (this._instance.options.checkboxChain !== 1)) {
							this.check(i, this._inner(f, {
								check : true
							}))
						}
						return
					}
				} else {
					if (h.length) {
						this._parentCheckbox(h)
					}
				}
			} else {
				if (h.length) {
					this._parentCheckbox(h)
				}
			}
			this._trigger(i, "checkboxadded", f)
		},
		setCheckbox : function(i, g) {
			g = this._options(g, null, function() {
				this._trigger(i, "checkboxfail", g)
			});
			if (this.isCheckbox() && this.isItem(i)) {
				if (!this._trigger(i, "beforecheckbox", g)) {
					this._fail(i, g);
					return
				}
				var j = !!g.checkbox;
				var h = g.checked;
				var f = g.checkboxName;
				if (j == this.hasCheckbox(i)) {
					if (j) {
						if (f !== e) {
							this
									._checkbox(i)
									.attr(
											"name",
											f ? f
													: this._instance.options.checkboxName)
						}
						if (h !== e) {
							this.check(i, this._inner(g, {
								check : h
							}))
						}
						this._trigger(i, "checkboxset", g)
					} else {
						this._trigger(i, "notcheckbox", g)
					}
					this._success(i, g)
				} else {
					if (j) {
						var k = function() {
							this._addCheckbox(i, {
								id : this.getId(i),
								checkboxName : f
							});
							if (h === e) {
								if (this._instance.options.checkboxChain !== false) {
									this._stateCheckbox(i, g)
								} else {
									this._trigger(i, "checkboxadded", g)
								}
							} else {
								this.check(i, this._inner(g, {
									check : h
								}));
								this._trigger(i, "checkboxadded", g)
							}
							this._success(i, g)
						};
						if (this.isRadio && this.hasRadio(i)) {
							this.setRadio(i, this._inner(g, {
								success : k,
								fail : g.fail,
								radio : false
							}))
						} else {
							k.apply(this)
						}
					} else {
						this._removeCheckbox(i);
						if (this._instance.options.checkboxChain !== false) {
							this._parentCheckbox(i)
						}
						this._trigger(i, "checkboxremoved", g);
						this._success(i, g)
					}
				}
			} else {
				this._fail(i, g)
			}
		},
		isChecked : function(f) {
			if (this.hasCheckbox(f)) {
				return this._checkbox(f).is(":checked")
			}
			if (this._super) {
				return this._super(f)
			}
			return false
		},
		check : function(h, g) {
			g = this._options(g, null, function() {
				this._trigger(h, "checkfail", g)
			});
			if (this.isCheckbox() && this.hasCheckbox(h)) {
				if (!this._trigger(h, "beforecheck", g)) {
					this._fail(h, g);
					return
				}
				var f = g.check;
				this._checkbox(h).prop("checked", f);
				if (this._instance.options.checkboxChain !== false) {
					this._childCheckbox(h);
					this._parentCheckbox(h)
				}
				this._trigger(h, f ? "checked" : "unchecked", g);
				this._success(h, g)
			} else {
				if (this._super) {
					this._super(h, g)
				} else {
					this._fail(h, g)
				}
			}
		},
		checkboxes : function(f, h) {
			var g = [];
			if (h === e) {
				return f.filter(".aciTreeCheckbox")
			}
			f.filter(".aciTreeCheckbox").each(this.proxy(function(i) {
				if (h == this._checkbox(d(i)).is(":checked")) {
					g[g.length] = i
				}
			}, true));
			return d(g)
		},
		isCheckbox : function() {
			return this._instance.options.checkbox
		},
		option : function(f, g) {
			if (this.wasInit() && !this.isLocked()) {
				if ((f == "checkbox") && (g != this.isCheckbox())) {
					if (g) {
						this._initCheckbox()
					} else {
						this._doneCheckbox()
					}
				}
			}
			this._super(f, g)
		},
		_doneCheckbox : function(f) {
			this._instance.jQuery.unbind(this._private.nameSpace);
			this._instance.jQuery.off(this._private.nameSpace, ".aciTreeItem");
			this._instance.jQuery.off(this._private.nameSpace,
					"input[type=checkbox]");
			if (!f) {
				this.checkboxes(this.childrens(null, true)).each(
						this.proxy(function(g) {
							this.setCheckbox(d(g), false)
						}, true))
			}
		},
		_destroyHook : function(f) {
			if (f) {
				this._doneCheckbox(true)
			}
			this._super(f)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(a,
			"aciTreeCheckbox");
	aciPluginClass.defaults("aciTree", b)
})(jQuery, this);

// radio (works best with selectable)
(function(d, b, e) {
	var a = {
		radio : false,
		radioName : "radio",
		radioChain : true
	};
	var c = {
		_initRadio : function() {
			this._instance.jQuery
					.bind("acitree" + this._private.nameSpace,
							function(j, h, i, f, g) {
								switch (f) {
								case "loaded":
									if (i && h._instance.options.radioChain) {
										h._loadRadio(i)
									}
									break;
								case "focused":
									h._radio(h.selected()).focus();
									break;
								case "selected":
									h._radio(i).focus();
									break
								}
							})
					.bind(
							"keydown" + this._private.nameSpace,
							this
									.proxy(function(g) {
										switch (g.which) {
										case 9:
										case 32:
											if (this.isSelectable) {
												var f = this.selected();
												if (this.hasRadio(f)) {
													if (this._lastFocus()
															.get(0) == this._instance.jQuery
															.get(0)) {
														this._radio(f).focus()
																.trigger(g)
													}
													g
															.stopImmediatePropagation()
												}
											}
											break
										}
									}))
					.on(
							"click" + this._private.nameSpace,
							".aciTreeItem",
							this
									.proxy(function(g) {
										if (d(g.target).hasClass("aciTreeItem")) {
											var f = this.itemFrom(g.target);
											if (this.hasRadio(f)
													&& !this.isChecked(f)) {
												this._radio(f).focus();
												this.check(f, {
													check : true
												});
												g.preventDefault()
											}
										}
									})).on("focus" + this._private.nameSpace,
							"input[type=radio]", this.proxy(function(g) {
								var f = this.itemFrom(g.target);
								if (this.isSelectable && !this.isSelected(f)) {
									this.select(f, true)
								}
							})).on("click" + this._private.nameSpace,
							"input[type=radio]", this.proxy(function(f, h) {
								var g = this.itemFrom(h.target);
								this.check(g, {
									check : d(f).is(":checked")
								})
							}, true)).on("keydown" + this._private.nameSpace,
							"input[type=radio]", this.proxy(function(g) {
								switch (g.which) {
								case 38:
								case 40:
								case 37:
								case 39:
								case 33:
								case 34:
								case 36:
								case 35:
								case 13:
								case 27:
									g.preventDefault();
									break;
								case 9:
								case 32:
									if (this.isSelectable) {
										var f = this.itemFrom(g.target);
										if (!this.isSelected(f)) {
											return false
										}
									}
									g.stopPropagation();
									break
								}
							}))
		},
		_radio : function(f) {
			return f.first().children(".aciTreeLine").find("input[type=radio]")
		},
		_initHook : function() {
			if (this.isRadio()) {
				this._initRadio()
			}
			this._super()
		},
		_itemHook : function(g, h, f, j) {
			if (this.isRadio()) {
				var i = this.isCheckbox && this.hasCheckbox(h);
				if (!i && (f.radio || (f.radio === e))) {
					this._addRadio(g, h, f)
				}
			}
			this._super(g, h, f, j)
		},
		_selectHook : function(h, i) {
			var f = this._super(h, i);
			if (f) {
				return true
			}
			if (this.isRadio() && this.hasRadio(h) && !this.hasRadio(i)) {
				var g = this._radio(h);
				if (g.is(":focus")) {
					g.blur();
					this._instance.jQuery.focus();
					return true
				}
			}
		},
		_addRadio : function(h, i, f) {
			var k = b.String(f.id).replace(/[^a-z0-9_-]/ig, "");
			var g = f.radioName ? f.radioName : null;
			if (!g) {
				var j = this.getId(h);
				g = this._instance.options.radioName
						+ "-"
						+ (j ? b.String(j).replace(/[^a-z0-9_-]/ig, "")
								: "root")
			}
			i.first().addClass("aciTreeRadio").children(".aciTreeLine").find(
					".aciTreeText").wrap("<label></label>").before(
					'<input type="radio" name="' + g + '" value="'
							+ this.getId(i) + '"'
							+ (f.checked ? ' checked="checked"' : "") + " />")
		},
		_removeRadio : function(g) {
			var f = g.first().removeClass("aciTreeRadio").children(
					".aciTreeLine").find("label");
			if (f.length) {
				f.find("*").not(".aciTreeText").remove();
				f.find(".aciTreeText").unwrap()
			}
		},
		setId : function(g, f) {
			f = this._options(f, function(h) {
				if (this.isRadio() && this.hasRadio(h)) {
					this._radio(h).attr("value", this.getId(h))
				}
			});
			this._super(g, f)
		},
		_loadRadio : function(f) {
			if (this.hasRadio(f)) {
				if (this.isChecked(f)) {
					if (!this.radios(this.childrens(f), true).length) {
						this._childRadio(f)
					}
				} else {
					this._childRadio(f)
				}
			}
		},
		_childRadio : function(f) {
			var h = this.proxy(function(j, k) {
				var l = this.radios(this.childrens(j));
				if (k) {
					var i = this.radios(l, true);
					if (i.length) {
						h(i, true);
						l = l.not(i.first())
					} else {
						if (l.length) {
							this._radio(l).prop("checked", true);
							h(l, true);
							l = l.slice(1)
						}
					}
				}
				l.each(this.proxy(function(m) {
					this._radio(d(m)).prop("checked", false);
					h(d(m), false)
				}, true))
			});
			var g = this._radio(f).is(":checked");
			h(f, g)
		},
		_parentRadio : function(f) {
			var h = this.proxy(function(i) {
				this.radios(this.siblings(i)).each(this.proxy(function(j) {
					this._radio(d(j)).prop("checked", false);
					this._childRadio(d(j))
				}, true))
			});
			h(f);
			var g = this._radio(f).is(":checked");
			this.path(f, true).each(this.proxy(function(i) {
				if (!this.hasRadio(d(i))) {
					return false
				}
				this._radio(d(i)).prop("checked", g);
				h(d(i))
			}, true))
		},
		hasRadio : function(f) {
			return f && f.hasClass("aciTreeRadio")
		},
		_stateRadio : function(i, f) {
			var g = this.parent(i);
			var h = this.radios(this.childrens(i), true);
			if (this.hasRadio(g)) {
				if (this.isChecked(g)) {
					var j = this.radios(this.siblings(i), true);
					if (j.length) {
						this._childRadio(i)
					} else {
						this._trigger(i, "radioadded", f);
						this.check(i, this._inner(f, {
							check : true
						}));
						return
					}
				} else {
					this._childRadio(i)
				}
			} else {
				if (h.length) {
					this._parentRadio(h)
				}
			}
			this._trigger(i, "radioadded", f)
		},
		setRadio : function(j, g) {
			g = this._options(g, null, function() {
				this._trigger(j, "radiofail", g)
			});
			if (this.isRadio() && this.isItem(j)) {
				if (!this._trigger(j, "beforeradio", g)) {
					this._fail(j, g);
					return
				}
				var f = !!g.radio;
				var i = g.checked;
				var h = g.radioName;
				if (f == this.hasRadio(j)) {
					if (f) {
						if (h !== e) {
							if (!h) {
								var l = this.getId(this.parent(j));
								var h = this._instance.options.radioName
										+ "-"
										+ (l ? b.String(l).replace(
												/[^a-z0-9_-]/ig, "") : "root")
							}
							this._radio(j).attr("name", h)
						}
						if (i !== e) {
							this.check(j, this._inner(g, {
								check : i
							}))
						}
						this._trigger(j, "radioset", g)
					} else {
						this._trigger(j, "notradio", g)
					}
					this._success(j, g)
				} else {
					if (f) {
						var k = function() {
							this._addRadio(this.parent(j), j.first(), {
								id : this.getId(j),
								radioName : h
							});
							if (i === e) {
								if (this._instance.options.radioChain) {
									this._stateRadio(j, g)
								} else {
									this._trigger(j, "radioadded", g)
								}
							} else {
								this.check(j, this._inner(g, {
									check : i
								}));
								this._trigger(j, "radioadded", g)
							}
							this._success(j, g)
						};
						if (this.isCheckbox && this.hasCheckbox(j)) {
							this.setCheckbox(j, this._inner(g, {
								success : k,
								fail : g.fail,
								checkbox : false
							}))
						} else {
							k.apply(this)
						}
					} else {
						i = this._radio(j).is(":checked");
						this._removeRadio(j.first());
						if (i) {
							this.check(this.radios(this.siblings(j)).first(),
									this._inner(g, {
										check : true
									}))
						}
						this._trigger(j, "radioremoved", g);
						this._success(j, g)
					}
				}
			} else {
				this._fail(j, g)
			}
		},
		isChecked : function(f) {
			if (this.hasRadio(f)) {
				return this._radio(f).is(":checked")
			}
			if (this._super) {
				return this._super(f)
			}
			return false
		},
		check : function(h, g) {
			g = this._options(g, null, function() {
				this._trigger(h, "checkfail", g)
			});
			if (this.isRadio() && this.hasRadio(h)) {
				if (!this._trigger(h, "beforecheck", g)) {
					this._fail(h, g);
					return
				}
				var f = g.check;
				this._radio(h).prop("checked", f);
				if (this._instance.options.radioChain) {
					this._childRadio(h);
					this._parentRadio(h)
				}
				this._trigger(h, f ? "checked" : "unchecked", g);
				this._success(h, g)
			} else {
				if (this._super) {
					this._super(h, g)
				} else {
					this._fail(h, g)
				}
			}
		},
		radios : function(f, h) {
			var g = [];
			if (h === e) {
				return f.filter(".aciTreeRadio")
			}
			f.filter(".aciTreeRadio").each(this.proxy(function(i) {
				if (h == this._radio(d(i)).is(":checked")) {
					g[g.length] = i
				}
			}, true));
			return d(g)
		},
		isRadio : function() {
			return this._instance.options.radio
		},
		option : function(f, g) {
			if (this.wasInit() && !this.isLocked()) {
				if ((f == "radio") && (g != this.isRadio())) {
					if (g) {
						this._initRadio()
					} else {
						this._doneRadio()
					}
				}
			}
			this._super(f, g)
		},
		_doneRadio : function(f) {
			this._instance.jQuery.unbind(this._private.nameSpace);
			this._instance.jQuery.off(this._private.nameSpace, ".aciTreeItem");
			this._instance.jQuery.off(this._private.nameSpace,
					"input[type=radio]");
			if (!f) {
				this.radios(this.childrens(null, true)).each(
						this.proxy(function(g) {
							this.setRadio(d(g), false)
						}, true))
			}
		},
		_destroyHook : function(f) {
			if (f) {
				this._doneRadio(true)
			}
			this._super(f)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(c,
			"aciTreeRadio");
	aciPluginClass.defaults("aciTree", a)
})(jQuery, this);

// column
(function(d, b, e) {
	var a = {
		columnData : []
	};
	var c = {
		_initHook : function() {
			if (this._instance.options.columnData.length) {
				var f = 0, j = false, h;
				for ( var g in this._instance.options.columnData) {
					h = this._instance.options.columnData[g];
					if (h.width !== e) {
						this._updateCss(".aciTree.aciTree"
								+ this._instance.index + " .aciTreeColumn" + f,
								"width:" + h.width + "px;");
						j = true
					}
					f++
				}
				if (j) {
					this._updateWidth()
				}
			}
			this._super()
		},
		_getCss : function(l, o, n) {
			var g = "_getCss_" + b.String(l).replace(/[^a-z0-9_-]/ig, "_");
			var k = d("body").find("#" + g);
			if (!k.length) {
				if (l instanceof Array) {
					var f = "", h = "";
					for ( var j in l) {
						f += '<div class="' + l[j] + '">';
						h += "</div>"
					}
					f += h
				} else {
					var f = '<div class="' + l + '"></div>'
				}
				d("body")
						.append(
								'<div id="'
										+ g
										+ '" style="position:relative;width:0px;height:0px;line-height:0px">'
										+ f + "</div>");
				k = d("body").find("#" + g)
			}
			var m = k.find("*:last").css(o);
			if (n) {
				m = parseInt(m);
				if (isNaN(m)) {
					m = null
				}
			}
			return m
		},
		_updateCss : function(h, f) {
			var j = "_updateCss_"
					+ b.String(h).replace(">", "_gt_").replace(/[^a-z0-9_-]/ig,
							"_");
			var g = '<style id="' + j + '" type="text/css">' + h + "{" + f
					+ "}</style>";
			var i = d("body").find("#" + j);
			if (i.length) {
				i.replaceWith(g)
			} else {
				d("body").prepend(g)
			}
		},
		getWidth : function(f) {
			if (f < this._instance.options.columnData.length) {
				return this._getCss([ "aciTree aciTree" + this._instance.index,
						"aciTreeColumn" + f ], "width", true)
			}
			return null
		},
		setWidth : function(g, f) {
			if (g < this._instance.options.columnData.length) {
				this._updateCss(".aciTree.aciTree" + this._instance.index
						+ " .aciTreeColumn" + g, "width:" + f + "px;");
				this._updateWidth()
			}
		},
		_updateWidth : function() {
			var f = 0, j = 0;
			for ( var g in this._instance.options.columnData) {
				if (this.isColumn(f)) {
					j += this.getWidth(f)
				}
				f++
			}
			var h = this._getCss([ "aciTree", "aciTreeIcon" ], "width", true);
			j += this._getCss([ "aciTree", "aciTreeItem" ], "padding-left",
					true)
					+ this._getCss([ "aciTree", "aciTreeItem" ],
							"padding-right", true);
			this._updateCss(".aciTree.aciTree" + this._instance.index
					+ " .aciTreeItem", "margin-right:" + (h + j) + "px;");
			this._updateCss(".aciTree[dir=rtl].aciTree" + this._instance.index
					+ " .aciTreeItem", "margin-right:0;margin-left:" + (h + j)
					+ "px;")
		},
		isColumn : function(f) {
			if (f < this._instance.options.columnData.length) {
				return this._getCss([ "aciTree aciTree" + this._instance.index,
						"aciTreeColumn" + f ], "display") != "none"
			}
			return false
		},
		toggleColumn : function(g, f) {
			if (g < this._instance.options.columnData.length) {
				if (f === e) {
					var f = !this.isColumn(g)
				}
				this._updateCss(".aciTree.aciTree" + this._instance.index
						+ " .aciTreeColumn" + g, "display:"
						+ (f ? "inherit" : "none") + ";");
				this._updateWidth()
			}
		},
		_itemHook : function(n, o, h, f) {
			if (this._instance.options.columnData.length) {
				var l = o.children(".aciTreeLine").find(".aciTreeEntry");
				var m = 0, k, g;
				for ( var j in this._instance.options.columnData) {
					k = this._instance.options.columnData[j];
					g = this._createColumn(h, k, m);
					l.prepend(g);
					m++
				}
			}
			this._super(n, o, h, f)
		},
		_createColumn : function(f, h, g) {
			var i = h.props && (f[h.props] !== e) ? f[h.props]
					: ((h.value === e) ? "" : h.value);
			return d('<div class="aciTreeColumn aciTreeColumn' + g + '">'
					+ (i.length ? i : "&nbsp;") + "</div>")
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(c,
			"aciTreeColumn");
	aciPluginClass.defaults("aciTree", a)
})(jQuery, this);

// editable (works best with selectable)
(function(c, b, e) {
	var a = {
		editable : false
	};
	var d = {
		_initEditable : function() {
			this._instance.jQuery.bind("acitree" + this._private.nameSpace,
					function(j, h, i, f, g) {
						switch (f) {
						case "blurred":
							var k = h.edited();
							if (k.length) {
								h.edit(k, {
									edit : false,
									save : true
								})
							}
							break;
						case "unselected":
							if (h.isEdited(i)) {
								h.edit(i, {
									edit : false,
									save : true
								})
							}
							break
						}
					})./*bind("click" + this._private.nameSpace,
					this.proxy(function() {
						var f = this.edited();
						if (f.length) {
							this.edit(f, {
								edit : false,
								save : true
							})
						}
					})).*/bind("keydown" + this._private.nameSpace,
					this.proxy(function(g) {
						switch (g.which) {
						case 113:
							if (this.isSelectable) {
								var f = this.selected();
								if (!this.isEdited(f)) {
									this.edit(f, {
										edit : true
									})
								}
							}
							break
						}
					}))./*on("mouseup" + this._private.nameSpace, ".aciTreeItem",
					this.proxy(function(g) {
						if (c(g.target).is(".aciTreeItem,.aciTreeText")) {
							var f = this.itemFrom(g.target);
							if (this.isSelectable && this.isSelected(f)) {
								this.edit(f, {
									edit : true
								})
							}
						}
					})).on("dblclick" + this._private.nameSpace,
					".aciTreeItem", this.proxy(function(g) {
						if (this.isSelectable && !this.isSelectable()) {
							var f = this.itemFrom(g.target);
							this.edit(f, {
								edit : true
							})
						}
					})).*/on("keydown" + this._private.nameSpace,
					"input[type=text]", this.proxy(function(g) {
						switch (g.which) {
						case 13:
							var f = this.itemFrom(g.target);
							this.edit(f, {
								edit : false,
								save : true
							});
							this._instance.jQuery.focus();
							g.stopPropagation();
							break;
						case 27:
							var f = this.itemFrom(g.target);
							this.edit(f, {
								edit : false
							});
							this._instance.jQuery.focus();
							g.preventDefault();
							g.stopPropagation();
							break;
						case 38:
						case 40:
						case 37:
						case 39:
						case 33:
						case 34:
						case 36:
						case 35:
						case 32:
							g.stopPropagation();
							break
						}
					})).on("blur" + this._private.nameSpace,
					"input[type=text]", this.proxy(function() {
						if (this.isSelectable && !this.isSelectable()) {
							var f = this.edited();
							this.edit(f, {
								edit : false,
								save : true
							})
						}
					})).on("click" + this._private.nameSpace,
					"input[type=text]", function(f) {
						// added here for onClick (same as for onDblClick)
						f.stopPropagation()
					}).on("dblclick" + this._private.nameSpace,
					"input[type=text]", function(f) {
						f.stopPropagation()
					})
		},
		_initHook : function() {
			if (this.isEditable()) {
				this._initEditable()
			}
			this._super()
		},
		_editbox : function(f) {
			return f ? f.first().children(".aciTreeLine").find(
					"input[type=text]") : c([])
		},
		_addEditbox : function(g) {
			var f = g.first().addClass("aciTreeEdited")
					.children(".aciTreeLine");
			var h = "editable_"
					+ b.String(this.getId(g)).replace(/[^a-z0-9_-]/ig, "");
			f.find(".aciTreeText").html(
					'<input id="' + h + '" type="text" value="" />');
			f.find("label").attr("for", h);
			this._editbox(g).val(this.getLabel(g))
		},
		_removeEditbox : function(g) {
			var f = g.first().removeClass("aciTreeEdited").children(
					".aciTreeLine");
			f.find(".aciTreeText").html(this.getLabel(g));
			f.find("label").removeAttr("for")
		},
		edited : function() {
			return this._instance.jQuery.find(".aciTreeEdited:first")
		},
		isEdited : function(f) {
			return f && f.first().hasClass("aciTreeEdited")
		},
		_focusEdit : function(g) {
			var h = this._editbox(g).focus().trigger("click").get(0);
			if (h) {
				if (typeof h.selectionStart == "number") {
					h.selectionStart = h.selectionEnd = h.value.length
				} else {
					if (h.createTextRange !== e) {
						var f = h.createTextRange();
						f.collapse(false);
						f.select()
					}
				}
			}
		},
		setLabel : function(g, f) {
			f = this._options(f, function(i) {
				if (this.isEditable() && this.isEdited(i)) {
					var h = this._editbox(i).is(":focus");
					this._addEditbox(i);
					if (h) {
						this._focusEdit(i)
					}
				}
			});
			this._super(g, f)
		},
		edit : function(i, f) {
			f = this._options(f, null, function() {
				this._trigger(i, "editfail", f)
			});
			if (this.isEditable() && this.isItem(i)) {
				if (!this._trigger(i, "beforeedit", f)) {
					this._fail(i, f);
					return
				}
				var h = f.edit;
				var g = f.save;
				if (h && this.isEdited(i)) {
					if (g) {
						var j = this._editbox(i).val();
						this.setLabel(i, {
							label : j
						})
					}
					this._trigger(k, "wasedit", f)
				} else {
					var k = this.edited();
					if (k.length) {
						var j = this._editbox(k).val();
						this._removeEditbox(k);
						if (g) {
							this.setLabel(k, {
								label : j
							})
						}
						this._trigger(k, "editstop", f)
					}
					if (h) {
						if (this.isSelectable && !this.isSelected(i)) {
							this.select(i, true)
						}
						this._addEditbox(i);
						this._focusEdit(i);
						this._trigger(i, "editstart", f)
					}
				}
				this._success(i, f)
			} else {
				this._fail(i, f)
			}
		},
		isEditable : function() {
			return this._instance.options.editable
		},
		option : function(f, g) {
			if (this.wasInit() && !this.isLocked()) {
				if ((f == "editable") && (g != this.isEditable())) {
					if (g) {
						this._initEditable()
					} else {
						this._doneEditable()
					}
				}
			}
			this._super(f, g)
		},
		_doneEditable : function() {
			this._instance.jQuery.unbind(this._private.nameSpace);
			this._instance.jQuery.off(this._private.nameSpace, ".aciTreeItem");
			this._instance.jQuery.off(this._private.nameSpace,
					"input[type=text]");
			var f = this.edited();
			if (f.length) {
				this.edit(f, {
					edit : false,
					save : true
				})
			}
		},
		_destroyHook : function(f) {
			if (f) {
				this._doneEditable()
			}
			this._super(f)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(d,
			"aciTreeEditable");
	aciPluginClass.defaults("aciTree", a)
})(jQuery, this);

// persist (require utils extension & jStorage plugin)
(function(c, b, e) {
	var a = {
		persist : null
	};
	var d = {
		__extend : function() {
			c.extend(this._private, {
				selectTimeout : null,
				stateTimeout : null
			});
			this._super()
		},
		_initPersist : function() {
			this._instance.jQuery.bind("acitree" + this._private.nameSpace,
					function(j, h, i, f, g) {
						if (g.uid == "ui.persist") {
							return
						}
						switch (f) {
						case "init":
							h._persistRestore();
							break;
						case "selected":
							h._persistLater(true);
							break;
						case "unselected":
							h._persistLater(true);
							break;
						case "opened":
							h._persistLater(false);
							break;
						case "closed":
							h._persistLater(false);
							break
						}
					})
		},
		_initHook : function() {
			if (this.isPersistOn()) {
				this._initPersist()
			}
			this._super()
		},
		_persistLater : function(f) {
			if (f) {
				b.clearTimeout(this._private.selectTimeout);
				this._private.selectTimeout = b.setTimeout(this
						.proxy(function() {
							this._persistSelected()
						}), 250)
			} else {
				b.clearTimeout(this._private.stateTimeout);
				this._private.stateTimeout = b.setTimeout(this
						.proxy(function() {
							this._persistOpen()
						}), 250)
			}
		},
		_persistRestore : function() {
			var f = new this._queue(null, true).context(this);
			var j = c.jStorage.get("aciTree_" + this._instance.options.persist
					+ "_opened");
			if (j instanceof Array) {
				for ( var g in j) {
					(function(i) {
						f.push(function(k) {
							this.searchId(null, null, {
								success : function(l) {
									this.open(l, {
										uid : "ui.persist",
										success : k,
										fail : k
									})
								},
								fail : k,
								id : i
							})
						}, true)
					})(j[g])
				}
			}
			if (this.isSelectable) {
				var h = c.jStorage.get("aciTree_"
						+ this._instance.options.persist + "_selected");
				if (h) {
					f.push(function(i) {
						this.searchId(null, null, {
							success : function(k) {
								this.select(k, {
									uid : "ui.persist",
									success : function(l) {
										this.setVisible(l, {
											center : true
										});
										i()
									},
									fail : i,
									select : true
								})
							},
							fail : i,
							id : h
						})
					}, true)
				}
			}
			f.run()
		},
		_persistSelected : function() {
			if (this.isSelectable) {
				var f = this.selected();
				c.jStorage.set("aciTree_" + this._instance.options.persist
						+ "_selected", this.getId(f))
			}
		},
		_persistOpen : function() {
			var f = [];
			this.visible(this.folders(this.childrens(null, true), true)).each(
					this.proxy(function(g) {
						f[f.length] = this.getId(c(g))
					}, true));
			c.jStorage.set("aciTree_" + this._instance.options.persist
					+ "_opened", f)
		},
		isPersist : function() {
			if (this.isPersistOn()) {
				var f = c.jStorage.get("aciTree_"
						+ this._instance.options.persist + "_selected");
				if (f) {
					return true
				}
				var g = c.jStorage.get("aciTree_"
						+ this._instance.options.persist + "_opened");
				if (g instanceof Array) {
					return true
				}
			}
			return false
		},
		unpersist : function() {
			if (this.isPersistOn()) {
				c.jStorage.deleteKey("aciTree_"
						+ this._instance.options.persist + "_selected");
				c.jStorage.deleteKey("aciTree_"
						+ this._instance.options.persist + "_opened")
			}
		},
		isPersistOn : function() {
			return this._instance.options.persist
		},
		option : function(f, h) {
			var g = this.isPersistOn();
			this._super(f, h);
			if (this.isPersistOn() != g) {
				if (g) {
					this._donePersist()
				} else {
					this._initPersist()
				}
			}
		},
		_donePersist : function() {
			this._instance.jQuery.unbind(this._private.nameSpace)
		},
		_destroyHook : function(f) {
			if (f) {
				this._donePersist()
			}
			this._super(f)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(d,
			"aciTreePersist");
	aciPluginClass.defaults("aciTree", a)
})(jQuery, this);

// hash (require utils extension & aciFragment plugin)
(function(d, c, e) {
	var a = {
		selectHash : null,
		openHash : null
	};
	var b = {
		__extend : function() {
			d.extend(this._private, {
				lastSelect : null,
				lastOpen : null,
				hashApi : null
			});
			this._super()
		},
		_initHash : function() {
			this._instance.jQuery.aciFragment();
			this._private.hashApi = this._instance.jQuery.aciFragment("api");
			this._instance.jQuery.bind("acitree" + this._private.nameSpace,
					function(j, h, i, f, g) {
						switch (f) {
						case "init":
							h._hashRestore();
							break
						}
					}).bind("acifragment" + this._private.nameSpace,
					this.proxy(function(h, g, f) {
						h.stopPropagation();
						this._hashRestore()
					}))
		},
		_initHook : function() {
			if (this.isHash()) {
				this._initHash()
			}
			this._super()
		},
		_hashRestore : function() {
			var f = new this._queue(null, true).context(this);
			var i = function(l) {
				for ( var k in l) {
					(function(m) {
						f.push(function(n) {
							this.searchId(null, null, {
								success : function(o) {
									this.open(o, {
										uid : "ui.hash",
										success : n,
										fail : n
									})
								},
								fail : n,
								id : m
							})
						}, true)
					})(l[k])
				}
			};
			if (this._instance.options.openHash) {
				var h = this._private.hashApi.get(
						this._instance.options.openHash, "");
				if (h.length && (h != this._private.lastOpen)) {
					this._private.lastOpen = h;
					var j = h.split(";");
					i(j)
				}
			}
			if (this._instance.options.selectHash && this.isSelectable) {
				var h = this._private.hashApi.get(
						this._instance.options.selectHash, "");
				if (h.length && (h != this._private.lastSelect)) {
					this._private.lastSelect = h;
					var j = h.split(";");
					var g = j.pop();
					i(j);
					if (g) {
						f.push(function(k) {
							this.searchId(null, null, {
								success : function(l) {
									this.select(l, {
										uid : "ui.hash",
										success : function(m) {
											this.setVisible(m, {
												center : true
											});
											k()
										},
										fail : k,
										select : true
									})
								},
								fail : k,
								id : g
							})
						}, true)
					}
				}
			}
			f.run()
		},
		isHash : function() {
			return this._instance.options.selectHash
					|| this._instance.options.openHash
		},
		option : function(f, g) {
			var h = this.isHash();
			this._super(f, g);
			if (this.isHash() != h) {
				if (h) {
					this._doneHash()
				} else {
					this._initHash()
				}
			}
		},
		_doneHash : function() {
			this._instance.jQuery.unbind(this._private.nameSpace);
			this._private.hashApi = null;
			this._instance.jQuery.aciFragment("destroy")
		},
		_destroyHook : function(f) {
			if (f) {
				this._doneHash()
			}
			this._super(f)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(b,
			"aciTreeHash");
	aciPluginClass.defaults("aciTree", a)
})(jQuery, this);

// sortable (require utils extension & aciSortable plugin)
(function(d, c, e) {
	var a = {
		sortable : false,
		sortDrag : function(g, i, h, f) {
			if (!h) {
				f.html(this.getLabel(g))
			}
		},
		sortValid : function(i, g, j, f, k, h) {
			if (f) {
				h.html("move " + this.getLabel(i) + " to "
						+ this.getLabel(this.itemFrom(g)));
				k.removeClass("aciTreeAfter aciTreeBefore")
			} else {
				if (j !== null) {
					if (j) {
						h.html("move " + this.getLabel(i) + " before "
								+ this.getLabel(g));
						k.removeClass("aciTreeAfter").addClass("aciTreeBefore")
					} else {
						h.html("move " + this.getLabel(i) + " after "
								+ this.getLabel(g));
						k.removeClass("aciTreeBefore").addClass("aciTreeAfter")
					}
				}
			}
		}
	};
	var b = {
		__extend : function() {
			d.extend(this._private, {
				openTimeout : null
			});
			this._super()
		},
		_initSortable : function() {
			this._instance.jQuery
					.aciSortable({
						container : ".aciTreeUl",
						item : ".aciTreeLi",
						child : 50,
						childHolder : '<ul class="aciTreeUl aciTreeChild"></ul>',
						childHolderSelector : ".aciTreeChild",
						placeholder : '<li class="aciTreeLi aciTreePlaceholder"><div></div></li>',
						placeholderSelector : ".aciTreePlaceholder",
						helper : '<div class="aciTreeHelper"></div>',
						helperSelector : ".aciTreeHelper",
						before : this.proxy(function(g) {
							this._instance.jQuery.focus();
							var f = this._options();
							if (!this._trigger(g, "beforedrag", f)) {
								this._trigger(g, "dragfail", f);
								return false
							}
							return true
						}),
						start : this.proxy(function(g, h, f) {
							this._instance.jQuery.addClass("aciTreeDragDrop");
							f.css({
								opacity : 1
							}).html(this.getLabel(g))
						}),
						drag : this.proxy(function(g, i, h, f) {
							if (!h) {
								c.clearTimeout(this._private.openTimeout)
							}
							if (this._instance.options.sortDrag) {
								this._instance.options.sortDrag.apply(this,
										arguments)
							}
						}),
						valid : this
								.proxy(function(j, h, k, g, l, i) {
									c.clearTimeout(this._private.openTimeout);
									if (!g && this.isFolder(h)) {
										if (!this.isOpen(h)
												&& !h
														.data("opening"
																+ this._private.nameSpace)) {
											this._private.openTimeout = c
													.setTimeout(
															this
																	.proxy(function() {
																		h
																				.data(
																						"opening"
																								+ this._private.nameSpace,
																						true);
																		this
																				.open(
																						h,
																						{
																							success : function(
																									m) {
																								m
																										.removeData("opening"
																												+ this._private.nameSpace)
																							},
																							fail : function(
																									m) {
																								m
																										.removeData("opening"
																												+ this._private.nameSpace)
																							}
																						})
																	}), 1000)
										}
									}
									var f = this._options({
										hover : h,
										before : k,
										isContainer : g,
										placeholder : l,
										helper : i
									});
									if (!this._trigger(j, "checkdrop", f)) {
										return false
									}
									if (this._instance.options.sortValid) {
										this._instance.options.sortValid.apply(
												this, arguments)
									}
									return true
								}),
						create : this.proxy(function(g, h, f) {
							if (this.isFile(f)) {
								f.append(g._instance.options.childHolder);
								return true
							}
							return false
						}, true),
						end : this.proxy(function(p, k, n, g) {
							c.clearTimeout(this._private.openTimeout);
							var q = {
								placeholder : n,
								helper : g
							};
							q = this._options(q, function() {
								this._trigger(p, "sorted", q)
							}, function() {
								this._trigger(p, "dropfail", q)
							});
							if (n.parent().length) {
								var i = this.prev(n);
								if (i.length) {
									n.detach();
									this.moveAfter(p, this._inner(q, {
										success : q.success,
										fail : q.fail,
										after : i
									}))
								} else {
									var j = this.next(n);
									if (j.length) {
										n.detach();
										this.moveBefore(p, this._inner(q, {
											success : q.success,
											fail : q.fail,
											before : j
										}))
									} else {
										var o = this.parent(n);
										var f = n.parent();
										n.detach();
										f.remove();
										if (this.isFile(o)) {
											this.asChild(p, this._inner(q, {
												success : function() {
													this._success(p, q);
													this.open(o)
												},
												fail : q.fail,
												parent : o
											}))
										} else {
											this._fail(p, q)
										}
									}
								}
							} else {
								this._fail(p, q)
							}
							if (g.parent().length) {
								var m = d(c).scrollTop();
								var h = d(c).scrollLeft();
								var l = p.get(0).getBoundingClientRect();
								g.animate({
									top : l.top + m,
									left : l.left + h,
									opacity : 0
								}, {
									complete : function() {
										g.detach()
									}
								})
							}
							this._instance.jQuery
									.removeClass("aciTreeDragDrop")
						})
					})
		},
		_initHook : function() {
			if (this.isSortable()) {
				this._initSortable()
			}
			this._super()
		},
		isSortable : function() {
			return this._instance.options.sortable
		},
		option : function(f, g) {
			if (this.wasInit() && !this.isLocked()) {
				if ((f == "sortable") && (g != this.isSortable())) {
					if (g) {
						this._initSortable()
					} else {
						this._doneSortable()
					}
				}
			}
			this._super(f, g)
		},
		_doneSortable : function() {
			this._instance.jQuery.unbind(this._private.nameSpace);
			this._instance.jQuery.aciSortable("destroy")
		},
		_destroyHook : function(f) {
			if (f) {
				this._doneSortable()
			}
			this._super(f)
		}
	};
	aciPluginClass.plugins.aciTree = aciPluginClass.plugins.aciTree.extend(b,
			"aciTreeSortable");
	aciPluginClass.defaults("aciTree", a)
})(jQuery, this);
